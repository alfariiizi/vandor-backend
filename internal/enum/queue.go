// Code generated by Vandor. DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

// Description for Queue enum
type Queue string

const (
	// critical:10
	QueueCritical Queue = "Critical"
	// default:3
	QueueDefault Queue = "Default"
	// low:1
	QueueLow Queue = "Low"
	// web_research:5
	QueueWebResearch Queue = "WebResearch"
)

var AllQueues = []Queue{
	QueueCritical,
	QueueDefault,
	QueueLow,
	QueueWebResearch,
}

var QueueEnum = struct {
	Critical    Queue
	Default     Queue
	Low         Queue
	WebResearch Queue
}{
	Critical:    QueueCritical,
	Default:     QueueDefault,
	Low:         QueueLow,
	WebResearch: QueueWebResearch,
}

var queueLabels = map[Queue]string{
	QueueCritical:    "critical:10",
	QueueDefault:     "default:3",
	QueueLow:         "low:1",
	QueueWebResearch: "web_research:5",
}

func (e Queue) IsValid() bool {
	switch e {
	case QueueCritical,
		QueueDefault,
		QueueLow,
		QueueWebResearch:
		return true
	}
	return false
}

func (e Queue) String() string {
	return string(e)
}

func (e Queue) Label() string {
	if label, ok := queueLabels[e]; ok {
		return label
	}
	return string(e)
}

func ParseQueue(s string) (Queue, error) {
	switch s {
	case "Critical":
		return QueueCritical, nil
	case "Default":
		return QueueDefault, nil
	case "Low":
		return QueueLow, nil
	case "WebResearch":
		return QueueWebResearch, nil
	}
	return "", fmt.Errorf("invalid Queue: %s", s)
}

func (e Queue) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

func (e *Queue) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	val, err := ParseQueue(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}
