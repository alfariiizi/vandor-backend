// Code generated by Vandor. DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

// Description for Event enum
type Event string

const (
	// notification.created
	EventNotificationCreated Event = "NotificationCreated"
	// opportunity.failed
	EventOpportunityFailed Event = "OpportunityFailed"
	// opportunity.running
	EventOpportunityRunning Event = "OpportunityRunning"
	// opportunity.success
	EventOpportunitySuccess Event = "OpportunitySuccess"
)

var AllEvents = []Event{
	EventNotificationCreated,
	EventOpportunityFailed,
	EventOpportunityRunning,
	EventOpportunitySuccess,
}

var EventEnum = struct {
	NotificationCreated Event
	OpportunityFailed   Event
	OpportunityRunning  Event
	OpportunitySuccess  Event
}{
	NotificationCreated: EventNotificationCreated,
	OpportunityFailed:   EventOpportunityFailed,
	OpportunityRunning:  EventOpportunityRunning,
	OpportunitySuccess:  EventOpportunitySuccess,
}

var eventLabels = map[Event]string{
	EventNotificationCreated: "notification.created",
	EventOpportunityFailed:   "opportunity.failed",
	EventOpportunityRunning:  "opportunity.running",
	EventOpportunitySuccess:  "opportunity.success",
}

func (e Event) IsValid() bool {
	switch e {
	case EventNotificationCreated,
		EventOpportunityFailed,
		EventOpportunityRunning,
		EventOpportunitySuccess:
		return true
	}
	return false
}

func (e Event) String() string {
	return string(e)
}

func (e Event) Label() string {
	if label, ok := eventLabels[e]; ok {
		return label
	}
	return string(e)
}

func ParseEvent(s string) (Event, error) {
	switch s {
	case "NotificationCreated":
		return EventNotificationCreated, nil
	case "OpportunityFailed":
		return EventOpportunityFailed, nil
	case "OpportunityRunning":
		return EventOpportunityRunning, nil
	case "OpportunitySuccess":
		return EventOpportunitySuccess, nil
	}
	return "", fmt.Errorf("invalid Event: %s", s)
}

func (e Event) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

func (e *Event) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	val, err := ParseEvent(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}
