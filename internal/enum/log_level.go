// Code generated by Vandor. DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Description for LogLevel enum
type LogLevel string

const (
	// log level for debugging
	LogLevelDebug LogLevel = "debug"
	// log level for errors
	LogLevelError LogLevel = "error"
	// log level for critical errors
	LogLevelFatal LogLevel = "fatal"
	// log level for informational messages
	LogLevelInfo LogLevel = "info"
	// log level for panic situations
	LogLevelPanic LogLevel = "panic"
	// log level for warnings (alias for warning)
	LogLevelWarn LogLevel = "warn"
	// log level for warnings
	LogLevelWarning LogLevel = "warning"
)

var AllLogLevels = []LogLevel{
	LogLevelDebug,
	LogLevelError,
	LogLevelFatal,
	LogLevelInfo,
	LogLevelPanic,
	LogLevelWarn,
	LogLevelWarning,
}

var LogLevelEnum = struct {
	Debug    LogLevel
	Error    LogLevel
	Fatal    LogLevel
	Info    LogLevel
	Panic    LogLevel
	Warn    LogLevel
	Warning    LogLevel
}{
	Debug:    LogLevelDebug,
	Error:    LogLevelError,
	Fatal:    LogLevelFatal,
	Info:    LogLevelInfo,
	Panic:    LogLevelPanic,
	Warn:    LogLevelWarn,
	Warning:    LogLevelWarning,
}

var logLevelLabels = map[LogLevel]string{
	LogLevelDebug:    "log level for debugging",
	LogLevelError:    "log level for errors",
	LogLevelFatal:    "log level for critical errors",
	LogLevelInfo:    "log level for informational messages",
	LogLevelPanic:    "log level for panic situations",
	LogLevelWarn:    "log level for warnings (alias for warning)",
	LogLevelWarning:    "log level for warnings",
}

func (e LogLevel) IsValid() bool {
	switch e {
	case LogLevelDebug,
		LogLevelError,
		LogLevelFatal,
		LogLevelInfo,
		LogLevelPanic,
		LogLevelWarn,
		LogLevelWarning:
		return true
	}
	return false
}

func (e LogLevel) String() string {
	return string(e)
}

func (e LogLevel) Label() string {
	if label, ok := logLevelLabels[e]; ok {
		return label
	}
	return string(e)
}

func ParseLogLevel(s string) (LogLevel, error) {
	switch s {
	case "debug":
		return LogLevelDebug, nil
	case "error":
		return LogLevelError, nil
	case "fatal":
		return LogLevelFatal, nil
	case "info":
		return LogLevelInfo, nil
	case "panic":
		return LogLevelPanic, nil
	case "warn":
		return LogLevelWarn, nil
	case "warning":
		return LogLevelWarning, nil
	}
	return "", fmt.Errorf("invalid LogLevel: %s", s)
}

func (e LogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

func (e *LogLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	val, err := ParseLogLevel(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}
