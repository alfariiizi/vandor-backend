// Code generated by Vandor. DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

// Description for UserRole enum
type UserRole string

const (
	// ADMIN
	UserRoleAdmin UserRole = "Admin"
	// SUPERADMIN
	UserRoleSuperAdmin UserRole = "SuperAdmin"
	// USER
	UserRoleUser UserRole = "User"
)

var AllUserRoles = []UserRole{
	UserRoleAdmin,
	UserRoleSuperAdmin,
	UserRoleUser,
}

var UserRoleEnum = struct {
	Admin      UserRole
	SuperAdmin UserRole
	User       UserRole
}{
	Admin:      UserRoleAdmin,
	SuperAdmin: UserRoleSuperAdmin,
	User:       UserRoleUser,
}

var userRoleLabels = map[UserRole]string{
	UserRoleAdmin:      "ADMIN",
	UserRoleSuperAdmin: "SUPERADMIN",
	UserRoleUser:       "USER",
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin,
		UserRoleSuperAdmin,
		UserRoleUser:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e UserRole) Label() string {
	if label, ok := userRoleLabels[e]; ok {
		return label
	}
	return string(e)
}

func ParseUserRole(s string) (UserRole, error) {
	switch s {
	case "Admin":
		return UserRoleAdmin, nil
	case "SuperAdmin":
		return UserRoleSuperAdmin, nil
	case "User":
		return UserRoleUser, nil
	}
	return "", fmt.Errorf("invalid UserRole: %s", s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

func (e *UserRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	val, err := ParseUserRole(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}
