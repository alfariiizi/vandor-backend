// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/notification"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// NotificationCreate is the builder for creating a Notification entity.
type NotificationCreate struct {
	config
	mutation *NotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationCreate) SetCreatedAt(v time.Time) *NotificationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableCreatedAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationCreate) SetUpdatedAt(v time.Time) *NotificationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableUpdatedAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *NotificationCreate) SetUserID(v uuid.UUID) *NotificationCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *NotificationCreate) SetTitle(v string) *NotificationCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetMessage sets the "message" field.
func (_c *NotificationCreate) SetMessage(v string) *NotificationCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetType sets the "type" field.
func (_c *NotificationCreate) SetType(v notification.Type) *NotificationCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableType(v *notification.Type) *NotificationCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetPriority sets the "priority" field.
func (_c *NotificationCreate) SetPriority(v notification.Priority) *NotificationCreate {
	_c.mutation.SetPriority(v)
	return _c
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_c *NotificationCreate) SetNillablePriority(v *notification.Priority) *NotificationCreate {
	if v != nil {
		_c.SetPriority(*v)
	}
	return _c
}

// SetChannel sets the "channel" field.
func (_c *NotificationCreate) SetChannel(v notification.Channel) *NotificationCreate {
	_c.mutation.SetChannel(v)
	return _c
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableChannel(v *notification.Channel) *NotificationCreate {
	if v != nil {
		_c.SetChannel(*v)
	}
	return _c
}

// SetRead sets the "read" field.
func (_c *NotificationCreate) SetRead(v bool) *NotificationCreate {
	_c.mutation.SetRead(v)
	return _c
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableRead(v *bool) *NotificationCreate {
	if v != nil {
		_c.SetRead(*v)
	}
	return _c
}

// SetArchived sets the "archived" field.
func (_c *NotificationCreate) SetArchived(v bool) *NotificationCreate {
	_c.mutation.SetArchived(v)
	return _c
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableArchived(v *bool) *NotificationCreate {
	if v != nil {
		_c.SetArchived(*v)
	}
	return _c
}

// SetSticky sets the "sticky" field.
func (_c *NotificationCreate) SetSticky(v bool) *NotificationCreate {
	_c.mutation.SetSticky(v)
	return _c
}

// SetNillableSticky sets the "sticky" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableSticky(v *bool) *NotificationCreate {
	if v != nil {
		_c.SetSticky(*v)
	}
	return _c
}

// SetLink sets the "link" field.
func (_c *NotificationCreate) SetLink(v string) *NotificationCreate {
	_c.mutation.SetLink(v)
	return _c
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableLink(v *string) *NotificationCreate {
	if v != nil {
		_c.SetLink(*v)
	}
	return _c
}

// SetAction sets the "action" field.
func (_c *NotificationCreate) SetAction(v string) *NotificationCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableAction(v *string) *NotificationCreate {
	if v != nil {
		_c.SetAction(*v)
	}
	return _c
}

// SetResourceType sets the "resource_type" field.
func (_c *NotificationCreate) SetResourceType(v string) *NotificationCreate {
	_c.mutation.SetResourceType(v)
	return _c
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableResourceType(v *string) *NotificationCreate {
	if v != nil {
		_c.SetResourceType(*v)
	}
	return _c
}

// SetResourceID sets the "resource_id" field.
func (_c *NotificationCreate) SetResourceID(v string) *NotificationCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableResourceID(v *string) *NotificationCreate {
	if v != nil {
		_c.SetResourceID(*v)
	}
	return _c
}

// SetGroupKey sets the "group_key" field.
func (_c *NotificationCreate) SetGroupKey(v string) *NotificationCreate {
	_c.mutation.SetGroupKey(v)
	return _c
}

// SetNillableGroupKey sets the "group_key" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableGroupKey(v *string) *NotificationCreate {
	if v != nil {
		_c.SetGroupKey(*v)
	}
	return _c
}

// SetDedupeKey sets the "dedupe_key" field.
func (_c *NotificationCreate) SetDedupeKey(v string) *NotificationCreate {
	_c.mutation.SetDedupeKey(v)
	return _c
}

// SetNillableDedupeKey sets the "dedupe_key" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableDedupeKey(v *string) *NotificationCreate {
	if v != nil {
		_c.SetDedupeKey(*v)
	}
	return _c
}

// SetDeliveredAt sets the "delivered_at" field.
func (_c *NotificationCreate) SetDeliveredAt(v time.Time) *NotificationCreate {
	_c.mutation.SetDeliveredAt(v)
	return _c
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableDeliveredAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetDeliveredAt(*v)
	}
	return _c
}

// SetReadAt sets the "read_at" field.
func (_c *NotificationCreate) SetReadAt(v time.Time) *NotificationCreate {
	_c.mutation.SetReadAt(v)
	return _c
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableReadAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetReadAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *NotificationCreate) SetExpiresAt(v time.Time) *NotificationCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableExpiresAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetExpiresAt(*v)
	}
	return _c
}

// SetMeta sets the "meta" field.
func (_c *NotificationCreate) SetMeta(v map[string]interface{}) *NotificationCreate {
	_c.mutation.SetMeta(v)
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationCreate) SetID(v uuid.UUID) *NotificationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableID(v *uuid.UUID) *NotificationCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *NotificationCreate) SetUser(v *User) *NotificationCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_c *NotificationCreate) Mutation() *NotificationMutation {
	return _c.mutation
}

// Save creates the Notification in the database.
func (_c *NotificationCreate) Save(ctx context.Context) (*Notification, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationCreate) SaveX(ctx context.Context) *Notification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notification.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := notification.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := notification.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Priority(); !ok {
		v := notification.DefaultPriority
		_c.mutation.SetPriority(v)
	}
	if _, ok := _c.mutation.Channel(); !ok {
		v := notification.DefaultChannel
		_c.mutation.SetChannel(v)
	}
	if _, ok := _c.mutation.Read(); !ok {
		v := notification.DefaultRead
		_c.mutation.SetRead(v)
	}
	if _, ok := _c.mutation.Archived(); !ok {
		v := notification.DefaultArchived
		_c.mutation.SetArchived(v)
	}
	if _, ok := _c.mutation.Sticky(); !ok {
		v := notification.DefaultSticky
		_c.mutation.SetSticky(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := notification.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Notification.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Notification.updated_at"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "Notification.user_id"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`db: missing required field "Notification.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := notification.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "Notification.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`db: missing required field "Notification.message"`)}
	}
	if v, ok := _c.mutation.Message(); ok {
		if err := notification.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "Notification.message": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "Notification.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`db: missing required field "Notification.priority"`)}
	}
	if v, ok := _c.mutation.Priority(); ok {
		if err := notification.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`db: validator failed for field "Notification.priority": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`db: missing required field "Notification.channel"`)}
	}
	if v, ok := _c.mutation.Channel(); ok {
		if err := notification.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`db: validator failed for field "Notification.channel": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Read(); !ok {
		return &ValidationError{Name: "read", err: errors.New(`db: missing required field "Notification.read"`)}
	}
	if _, ok := _c.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`db: missing required field "Notification.archived"`)}
	}
	if _, ok := _c.mutation.Sticky(); !ok {
		return &ValidationError{Name: "sticky", err: errors.New(`db: missing required field "Notification.sticky"`)}
	}
	if v, ok := _c.mutation.Link(); ok {
		if err := notification.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`db: validator failed for field "Notification.link": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Action(); ok {
		if err := notification.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "Notification.action": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ResourceType(); ok {
		if err := notification.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`db: validator failed for field "Notification.resource_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ResourceID(); ok {
		if err := notification.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`db: validator failed for field "Notification.resource_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.GroupKey(); ok {
		if err := notification.GroupKeyValidator(v); err != nil {
			return &ValidationError{Name: "group_key", err: fmt.Errorf(`db: validator failed for field "Notification.group_key": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DedupeKey(); ok {
		if err := notification.DedupeKeyValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_key", err: fmt.Errorf(`db: validator failed for field "Notification.dedupe_key": %w`, err)}
		}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "Notification.user"`)}
	}
	return nil
}

func (_c *NotificationCreate) sqlSave(ctx context.Context) (*Notification, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationCreate) createSpec() (*Notification, *sqlgraph.CreateSpec) {
	var (
		_node = &Notification{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notification.Table, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Priority(); ok {
		_spec.SetField(notification.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := _c.mutation.Channel(); ok {
		_spec.SetField(notification.FieldChannel, field.TypeEnum, value)
		_node.Channel = value
	}
	if value, ok := _c.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
		_node.Read = value
	}
	if value, ok := _c.mutation.Archived(); ok {
		_spec.SetField(notification.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := _c.mutation.Sticky(); ok {
		_spec.SetField(notification.FieldSticky, field.TypeBool, value)
		_node.Sticky = value
	}
	if value, ok := _c.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
		_node.Link = &value
	}
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(notification.FieldAction, field.TypeString, value)
		_node.Action = &value
	}
	if value, ok := _c.mutation.ResourceType(); ok {
		_spec.SetField(notification.FieldResourceType, field.TypeString, value)
		_node.ResourceType = &value
	}
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(notification.FieldResourceID, field.TypeString, value)
		_node.ResourceID = &value
	}
	if value, ok := _c.mutation.GroupKey(); ok {
		_spec.SetField(notification.FieldGroupKey, field.TypeString, value)
		_node.GroupKey = &value
	}
	if value, ok := _c.mutation.DedupeKey(); ok {
		_spec.SetField(notification.FieldDedupeKey, field.TypeString, value)
		_node.DedupeKey = &value
	}
	if value, ok := _c.mutation.DeliveredAt(); ok {
		_spec.SetField(notification.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = &value
	}
	if value, ok := _c.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = &value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(notification.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := _c.mutation.Meta(); ok {
		_spec.SetField(notification.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationCreate) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertOne {
	_c.conflict = opts
	return &NotificationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationCreate) OnConflictColumns(columns ...string) *NotificationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertOne{
		create: _c,
	}
}

type (
	// NotificationUpsertOne is the builder for "upsert"-ing
	//  one Notification node.
	NotificationUpsertOne struct {
		create *NotificationCreate
	}

	// NotificationUpsert is the "OnConflict" setter.
	NotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsert) SetUpdatedAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateUpdatedAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsert) SetUserID(v uuid.UUID) *NotificationUpsert {
	u.Set(notification.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateUserID() *NotificationUpsert {
	u.SetExcluded(notification.FieldUserID)
	return u
}

// SetTitle sets the "title" field.
func (u *NotificationUpsert) SetTitle(v string) *NotificationUpsert {
	u.Set(notification.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateTitle() *NotificationUpsert {
	u.SetExcluded(notification.FieldTitle)
	return u
}

// SetMessage sets the "message" field.
func (u *NotificationUpsert) SetMessage(v string) *NotificationUpsert {
	u.Set(notification.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateMessage() *NotificationUpsert {
	u.SetExcluded(notification.FieldMessage)
	return u
}

// SetType sets the "type" field.
func (u *NotificationUpsert) SetType(v notification.Type) *NotificationUpsert {
	u.Set(notification.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateType() *NotificationUpsert {
	u.SetExcluded(notification.FieldType)
	return u
}

// SetPriority sets the "priority" field.
func (u *NotificationUpsert) SetPriority(v notification.Priority) *NotificationUpsert {
	u.Set(notification.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *NotificationUpsert) UpdatePriority() *NotificationUpsert {
	u.SetExcluded(notification.FieldPriority)
	return u
}

// SetChannel sets the "channel" field.
func (u *NotificationUpsert) SetChannel(v notification.Channel) *NotificationUpsert {
	u.Set(notification.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateChannel() *NotificationUpsert {
	u.SetExcluded(notification.FieldChannel)
	return u
}

// SetRead sets the "read" field.
func (u *NotificationUpsert) SetRead(v bool) *NotificationUpsert {
	u.Set(notification.FieldRead, v)
	return u
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateRead() *NotificationUpsert {
	u.SetExcluded(notification.FieldRead)
	return u
}

// SetArchived sets the "archived" field.
func (u *NotificationUpsert) SetArchived(v bool) *NotificationUpsert {
	u.Set(notification.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateArchived() *NotificationUpsert {
	u.SetExcluded(notification.FieldArchived)
	return u
}

// SetSticky sets the "sticky" field.
func (u *NotificationUpsert) SetSticky(v bool) *NotificationUpsert {
	u.Set(notification.FieldSticky, v)
	return u
}

// UpdateSticky sets the "sticky" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateSticky() *NotificationUpsert {
	u.SetExcluded(notification.FieldSticky)
	return u
}

// SetLink sets the "link" field.
func (u *NotificationUpsert) SetLink(v string) *NotificationUpsert {
	u.Set(notification.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateLink() *NotificationUpsert {
	u.SetExcluded(notification.FieldLink)
	return u
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsert) ClearLink() *NotificationUpsert {
	u.SetNull(notification.FieldLink)
	return u
}

// SetAction sets the "action" field.
func (u *NotificationUpsert) SetAction(v string) *NotificationUpsert {
	u.Set(notification.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateAction() *NotificationUpsert {
	u.SetExcluded(notification.FieldAction)
	return u
}

// ClearAction clears the value of the "action" field.
func (u *NotificationUpsert) ClearAction() *NotificationUpsert {
	u.SetNull(notification.FieldAction)
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *NotificationUpsert) SetResourceType(v string) *NotificationUpsert {
	u.Set(notification.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateResourceType() *NotificationUpsert {
	u.SetExcluded(notification.FieldResourceType)
	return u
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *NotificationUpsert) ClearResourceType() *NotificationUpsert {
	u.SetNull(notification.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *NotificationUpsert) SetResourceID(v string) *NotificationUpsert {
	u.Set(notification.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateResourceID() *NotificationUpsert {
	u.SetExcluded(notification.FieldResourceID)
	return u
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *NotificationUpsert) ClearResourceID() *NotificationUpsert {
	u.SetNull(notification.FieldResourceID)
	return u
}

// SetGroupKey sets the "group_key" field.
func (u *NotificationUpsert) SetGroupKey(v string) *NotificationUpsert {
	u.Set(notification.FieldGroupKey, v)
	return u
}

// UpdateGroupKey sets the "group_key" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateGroupKey() *NotificationUpsert {
	u.SetExcluded(notification.FieldGroupKey)
	return u
}

// ClearGroupKey clears the value of the "group_key" field.
func (u *NotificationUpsert) ClearGroupKey() *NotificationUpsert {
	u.SetNull(notification.FieldGroupKey)
	return u
}

// SetDedupeKey sets the "dedupe_key" field.
func (u *NotificationUpsert) SetDedupeKey(v string) *NotificationUpsert {
	u.Set(notification.FieldDedupeKey, v)
	return u
}

// UpdateDedupeKey sets the "dedupe_key" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateDedupeKey() *NotificationUpsert {
	u.SetExcluded(notification.FieldDedupeKey)
	return u
}

// ClearDedupeKey clears the value of the "dedupe_key" field.
func (u *NotificationUpsert) ClearDedupeKey() *NotificationUpsert {
	u.SetNull(notification.FieldDedupeKey)
	return u
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationUpsert) SetDeliveredAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldDeliveredAt, v)
	return u
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateDeliveredAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldDeliveredAt)
	return u
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationUpsert) ClearDeliveredAt() *NotificationUpsert {
	u.SetNull(notification.FieldDeliveredAt)
	return u
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsert) SetReadAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldReadAt, v)
	return u
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateReadAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldReadAt)
	return u
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsert) ClearReadAt() *NotificationUpsert {
	u.SetNull(notification.FieldReadAt)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *NotificationUpsert) SetExpiresAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateExpiresAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *NotificationUpsert) ClearExpiresAt() *NotificationUpsert {
	u.SetNull(notification.FieldExpiresAt)
	return u
}

// SetMeta sets the "meta" field.
func (u *NotificationUpsert) SetMeta(v map[string]interface{}) *NotificationUpsert {
	u.Set(notification.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateMeta() *NotificationUpsert {
	u.SetExcluded(notification.FieldMeta)
	return u
}

// ClearMeta clears the value of the "meta" field.
func (u *NotificationUpsert) ClearMeta() *NotificationUpsert {
	u.SetNull(notification.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationUpsertOne) UpdateNewValues() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notification.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notification.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationUpsertOne) Ignore() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertOne) DoNothing() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreate.OnConflict
// documentation for more info.
func (u *NotificationUpsertOne) Update(set func(*NotificationUpsert)) *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertOne) SetUpdatedAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateUpdatedAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsertOne) SetUserID(v uuid.UUID) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateUserID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertOne) SetTitle(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateTitle() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetMessage sets the "message" field.
func (u *NotificationUpsertOne) SetMessage(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateMessage() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateMessage()
	})
}

// SetType sets the "type" field.
func (u *NotificationUpsertOne) SetType(v notification.Type) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateType() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateType()
	})
}

// SetPriority sets the "priority" field.
func (u *NotificationUpsertOne) SetPriority(v notification.Priority) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdatePriority() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdatePriority()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationUpsertOne) SetChannel(v notification.Channel) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateChannel() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateChannel()
	})
}

// SetRead sets the "read" field.
func (u *NotificationUpsertOne) SetRead(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetRead(v)
	})
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateRead() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateRead()
	})
}

// SetArchived sets the "archived" field.
func (u *NotificationUpsertOne) SetArchived(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateArchived() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateArchived()
	})
}

// SetSticky sets the "sticky" field.
func (u *NotificationUpsertOne) SetSticky(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetSticky(v)
	})
}

// UpdateSticky sets the "sticky" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateSticky() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateSticky()
	})
}

// SetLink sets the "link" field.
func (u *NotificationUpsertOne) SetLink(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateLink() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsertOne) ClearLink() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearLink()
	})
}

// SetAction sets the "action" field.
func (u *NotificationUpsertOne) SetAction(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateAction() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateAction()
	})
}

// ClearAction clears the value of the "action" field.
func (u *NotificationUpsertOne) ClearAction() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *NotificationUpsertOne) SetResourceType(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateResourceType() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceType()
	})
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *NotificationUpsertOne) ClearResourceType() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *NotificationUpsertOne) SetResourceID(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateResourceID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *NotificationUpsertOne) ClearResourceID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceID()
	})
}

// SetGroupKey sets the "group_key" field.
func (u *NotificationUpsertOne) SetGroupKey(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetGroupKey(v)
	})
}

// UpdateGroupKey sets the "group_key" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateGroupKey() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateGroupKey()
	})
}

// ClearGroupKey clears the value of the "group_key" field.
func (u *NotificationUpsertOne) ClearGroupKey() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearGroupKey()
	})
}

// SetDedupeKey sets the "dedupe_key" field.
func (u *NotificationUpsertOne) SetDedupeKey(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetDedupeKey(v)
	})
}

// UpdateDedupeKey sets the "dedupe_key" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateDedupeKey() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateDedupeKey()
	})
}

// ClearDedupeKey clears the value of the "dedupe_key" field.
func (u *NotificationUpsertOne) ClearDedupeKey() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearDedupeKey()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationUpsertOne) SetDeliveredAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateDeliveredAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationUpsertOne) ClearDeliveredAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsertOne) SetReadAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateReadAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsertOne) ClearReadAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *NotificationUpsertOne) SetExpiresAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateExpiresAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *NotificationUpsertOne) ClearExpiresAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearExpiresAt()
	})
}

// SetMeta sets the "meta" field.
func (u *NotificationUpsertOne) SetMeta(v map[string]interface{}) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateMeta() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *NotificationUpsertOne) ClearMeta() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearMeta()
	})
}

// Exec executes the query.
func (u *NotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationUpsertOne.ID is not supported by MySQL driver. Use NotificationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationCreateBulk is the builder for creating many Notification entities in bulk.
type NotificationCreateBulk struct {
	config
	err      error
	builders []*NotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Notification entities in the database.
func (_c *NotificationCreateBulk) Save(ctx context.Context) ([]*Notification, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Notification, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationCreateBulk) SaveX(ctx context.Context) []*Notification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertBulk {
	_c.conflict = opts
	return &NotificationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationCreateBulk) OnConflictColumns(columns ...string) *NotificationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertBulk{
		create: _c,
	}
}

// NotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Notification nodes.
type NotificationUpsertBulk struct {
	create *NotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationUpsertBulk) UpdateNewValues() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notification.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notification.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationUpsertBulk) Ignore() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertBulk) DoNothing() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationUpsertBulk) Update(set func(*NotificationUpsert)) *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertBulk) SetUpdatedAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateUpdatedAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsertBulk) SetUserID(v uuid.UUID) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateUserID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertBulk) SetTitle(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateTitle() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetMessage sets the "message" field.
func (u *NotificationUpsertBulk) SetMessage(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateMessage() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateMessage()
	})
}

// SetType sets the "type" field.
func (u *NotificationUpsertBulk) SetType(v notification.Type) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateType() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateType()
	})
}

// SetPriority sets the "priority" field.
func (u *NotificationUpsertBulk) SetPriority(v notification.Priority) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdatePriority() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdatePriority()
	})
}

// SetChannel sets the "channel" field.
func (u *NotificationUpsertBulk) SetChannel(v notification.Channel) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateChannel() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateChannel()
	})
}

// SetRead sets the "read" field.
func (u *NotificationUpsertBulk) SetRead(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetRead(v)
	})
}

// UpdateRead sets the "read" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateRead() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateRead()
	})
}

// SetArchived sets the "archived" field.
func (u *NotificationUpsertBulk) SetArchived(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateArchived() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateArchived()
	})
}

// SetSticky sets the "sticky" field.
func (u *NotificationUpsertBulk) SetSticky(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetSticky(v)
	})
}

// UpdateSticky sets the "sticky" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateSticky() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateSticky()
	})
}

// SetLink sets the "link" field.
func (u *NotificationUpsertBulk) SetLink(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateLink() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *NotificationUpsertBulk) ClearLink() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearLink()
	})
}

// SetAction sets the "action" field.
func (u *NotificationUpsertBulk) SetAction(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateAction() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateAction()
	})
}

// ClearAction clears the value of the "action" field.
func (u *NotificationUpsertBulk) ClearAction() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *NotificationUpsertBulk) SetResourceType(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateResourceType() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceType()
	})
}

// ClearResourceType clears the value of the "resource_type" field.
func (u *NotificationUpsertBulk) ClearResourceType() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *NotificationUpsertBulk) SetResourceID(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateResourceID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateResourceID()
	})
}

// ClearResourceID clears the value of the "resource_id" field.
func (u *NotificationUpsertBulk) ClearResourceID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearResourceID()
	})
}

// SetGroupKey sets the "group_key" field.
func (u *NotificationUpsertBulk) SetGroupKey(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetGroupKey(v)
	})
}

// UpdateGroupKey sets the "group_key" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateGroupKey() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateGroupKey()
	})
}

// ClearGroupKey clears the value of the "group_key" field.
func (u *NotificationUpsertBulk) ClearGroupKey() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearGroupKey()
	})
}

// SetDedupeKey sets the "dedupe_key" field.
func (u *NotificationUpsertBulk) SetDedupeKey(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetDedupeKey(v)
	})
}

// UpdateDedupeKey sets the "dedupe_key" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateDedupeKey() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateDedupeKey()
	})
}

// ClearDedupeKey clears the value of the "dedupe_key" field.
func (u *NotificationUpsertBulk) ClearDedupeKey() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearDedupeKey()
	})
}

// SetDeliveredAt sets the "delivered_at" field.
func (u *NotificationUpsertBulk) SetDeliveredAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetDeliveredAt(v)
	})
}

// UpdateDeliveredAt sets the "delivered_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateDeliveredAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateDeliveredAt()
	})
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (u *NotificationUpsertBulk) ClearDeliveredAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearDeliveredAt()
	})
}

// SetReadAt sets the "read_at" field.
func (u *NotificationUpsertBulk) SetReadAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetReadAt(v)
	})
}

// UpdateReadAt sets the "read_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateReadAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateReadAt()
	})
}

// ClearReadAt clears the value of the "read_at" field.
func (u *NotificationUpsertBulk) ClearReadAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearReadAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *NotificationUpsertBulk) SetExpiresAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateExpiresAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *NotificationUpsertBulk) ClearExpiresAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearExpiresAt()
	})
}

// SetMeta sets the "meta" field.
func (u *NotificationUpsertBulk) SetMeta(v map[string]interface{}) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateMeta() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *NotificationUpsertBulk) ClearMeta() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearMeta()
	})
}

// Exec executes the query.
func (u *NotificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
