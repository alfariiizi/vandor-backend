// Code generated by ent, DO NOT EDIT.

package notification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldArchived, v))
}

// Sticky applies equality check predicate on the "sticky" field. It's identical to StickyEQ.
func Sticky(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSticky, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldAction, v))
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceType, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceID, v))
}

// GroupKey applies equality check predicate on the "group_key" field. It's identical to GroupKeyEQ.
func GroupKey(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldGroupKey, v))
}

// DedupeKey applies equality check predicate on the "dedupe_key" field. It's identical to DedupeKeyEQ.
func DedupeKey(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDedupeKey, v))
}

// DeliveredAt applies equality check predicate on the "delivered_at" field. It's identical to DeliveredAtEQ.
func DeliveredAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDeliveredAt, v))
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUserID, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTitle, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldMessage, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldPriority, vs...))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v Channel) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v Channel) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...Channel) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...Channel) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldChannel, vs...))
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRead, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldArchived, v))
}

// StickyEQ applies the EQ predicate on the "sticky" field.
func StickyEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSticky, v))
}

// StickyNEQ applies the NEQ predicate on the "sticky" field.
func StickyNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldSticky, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldLink, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldAction, v))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldResourceType, v))
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldResourceType, v))
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldResourceType, v))
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldResourceType, v))
}

// ResourceTypeContains applies the Contains predicate on the "resource_type" field.
func ResourceTypeContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldResourceType, v))
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resource_type" field.
func ResourceTypeHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldResourceType, v))
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resource_type" field.
func ResourceTypeHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldResourceType, v))
}

// ResourceTypeIsNil applies the IsNil predicate on the "resource_type" field.
func ResourceTypeIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldResourceType))
}

// ResourceTypeNotNil applies the NotNil predicate on the "resource_type" field.
func ResourceTypeNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldResourceType))
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resource_type" field.
func ResourceTypeEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldResourceType, v))
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resource_type" field.
func ResourceTypeContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldResourceType, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldResourceID))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldResourceID, v))
}

// GroupKeyEQ applies the EQ predicate on the "group_key" field.
func GroupKeyEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldGroupKey, v))
}

// GroupKeyNEQ applies the NEQ predicate on the "group_key" field.
func GroupKeyNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldGroupKey, v))
}

// GroupKeyIn applies the In predicate on the "group_key" field.
func GroupKeyIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldGroupKey, vs...))
}

// GroupKeyNotIn applies the NotIn predicate on the "group_key" field.
func GroupKeyNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldGroupKey, vs...))
}

// GroupKeyGT applies the GT predicate on the "group_key" field.
func GroupKeyGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldGroupKey, v))
}

// GroupKeyGTE applies the GTE predicate on the "group_key" field.
func GroupKeyGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldGroupKey, v))
}

// GroupKeyLT applies the LT predicate on the "group_key" field.
func GroupKeyLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldGroupKey, v))
}

// GroupKeyLTE applies the LTE predicate on the "group_key" field.
func GroupKeyLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldGroupKey, v))
}

// GroupKeyContains applies the Contains predicate on the "group_key" field.
func GroupKeyContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldGroupKey, v))
}

// GroupKeyHasPrefix applies the HasPrefix predicate on the "group_key" field.
func GroupKeyHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldGroupKey, v))
}

// GroupKeyHasSuffix applies the HasSuffix predicate on the "group_key" field.
func GroupKeyHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldGroupKey, v))
}

// GroupKeyIsNil applies the IsNil predicate on the "group_key" field.
func GroupKeyIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldGroupKey))
}

// GroupKeyNotNil applies the NotNil predicate on the "group_key" field.
func GroupKeyNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldGroupKey))
}

// GroupKeyEqualFold applies the EqualFold predicate on the "group_key" field.
func GroupKeyEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldGroupKey, v))
}

// GroupKeyContainsFold applies the ContainsFold predicate on the "group_key" field.
func GroupKeyContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldGroupKey, v))
}

// DedupeKeyEQ applies the EQ predicate on the "dedupe_key" field.
func DedupeKeyEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDedupeKey, v))
}

// DedupeKeyNEQ applies the NEQ predicate on the "dedupe_key" field.
func DedupeKeyNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldDedupeKey, v))
}

// DedupeKeyIn applies the In predicate on the "dedupe_key" field.
func DedupeKeyIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldDedupeKey, vs...))
}

// DedupeKeyNotIn applies the NotIn predicate on the "dedupe_key" field.
func DedupeKeyNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldDedupeKey, vs...))
}

// DedupeKeyGT applies the GT predicate on the "dedupe_key" field.
func DedupeKeyGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldDedupeKey, v))
}

// DedupeKeyGTE applies the GTE predicate on the "dedupe_key" field.
func DedupeKeyGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldDedupeKey, v))
}

// DedupeKeyLT applies the LT predicate on the "dedupe_key" field.
func DedupeKeyLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldDedupeKey, v))
}

// DedupeKeyLTE applies the LTE predicate on the "dedupe_key" field.
func DedupeKeyLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldDedupeKey, v))
}

// DedupeKeyContains applies the Contains predicate on the "dedupe_key" field.
func DedupeKeyContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldDedupeKey, v))
}

// DedupeKeyHasPrefix applies the HasPrefix predicate on the "dedupe_key" field.
func DedupeKeyHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldDedupeKey, v))
}

// DedupeKeyHasSuffix applies the HasSuffix predicate on the "dedupe_key" field.
func DedupeKeyHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldDedupeKey, v))
}

// DedupeKeyIsNil applies the IsNil predicate on the "dedupe_key" field.
func DedupeKeyIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldDedupeKey))
}

// DedupeKeyNotNil applies the NotNil predicate on the "dedupe_key" field.
func DedupeKeyNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldDedupeKey))
}

// DedupeKeyEqualFold applies the EqualFold predicate on the "dedupe_key" field.
func DedupeKeyEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldDedupeKey, v))
}

// DedupeKeyContainsFold applies the ContainsFold predicate on the "dedupe_key" field.
func DedupeKeyContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldDedupeKey, v))
}

// DeliveredAtEQ applies the EQ predicate on the "delivered_at" field.
func DeliveredAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldDeliveredAt, v))
}

// DeliveredAtNEQ applies the NEQ predicate on the "delivered_at" field.
func DeliveredAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldDeliveredAt, v))
}

// DeliveredAtIn applies the In predicate on the "delivered_at" field.
func DeliveredAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldDeliveredAt, vs...))
}

// DeliveredAtNotIn applies the NotIn predicate on the "delivered_at" field.
func DeliveredAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldDeliveredAt, vs...))
}

// DeliveredAtGT applies the GT predicate on the "delivered_at" field.
func DeliveredAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldDeliveredAt, v))
}

// DeliveredAtGTE applies the GTE predicate on the "delivered_at" field.
func DeliveredAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldDeliveredAt, v))
}

// DeliveredAtLT applies the LT predicate on the "delivered_at" field.
func DeliveredAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldDeliveredAt, v))
}

// DeliveredAtLTE applies the LTE predicate on the "delivered_at" field.
func DeliveredAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldDeliveredAt, v))
}

// DeliveredAtIsNil applies the IsNil predicate on the "delivered_at" field.
func DeliveredAtIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldDeliveredAt))
}

// DeliveredAtNotNil applies the NotNil predicate on the "delivered_at" field.
func DeliveredAtNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldDeliveredAt))
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldReadAt, v))
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldReadAt, v))
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldReadAt, vs...))
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldReadAt, vs...))
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldReadAt, v))
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldReadAt, v))
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldReadAt, v))
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldReadAt, v))
}

// ReadAtIsNil applies the IsNil predicate on the "read_at" field.
func ReadAtIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldReadAt))
}

// ReadAtNotNil applies the NotNil predicate on the "read_at" field.
func ReadAtNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldReadAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldExpiresAt))
}

// MetaIsNil applies the IsNil predicate on the "meta" field.
func MetaIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldMeta))
}

// MetaNotNil applies the NotNil predicate on the "meta" field.
func MetaNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldMeta))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
