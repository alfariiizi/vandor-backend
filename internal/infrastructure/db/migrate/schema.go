// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Size: 200},
		{Name: "message", Type: field.TypeString, SchemaType: map[string]string{"mysql": "TEXT", "postgres": "TEXT"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"info", "success", "warning", "error"}, Default: "info"},
		{Name: "priority", Type: field.TypeEnum, Enums: []string{"low", "normal", "high", "urgent"}, Default: "normal"},
		{Name: "channel", Type: field.TypeEnum, Enums: []string{"in_app", "email", "push", "sms", "webhook"}, Default: "in_app"},
		{Name: "read", Type: field.TypeBool, Default: false},
		{Name: "archived", Type: field.TypeBool, Default: false},
		{Name: "sticky", Type: field.TypeBool, Default: false},
		{Name: "link", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "action", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "resource_type", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "resource_id", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "group_key", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "dedupe_key", Type: field.TypeString, Unique: true, Nullable: true, Size: 200},
		{Name: "delivered_at", Type: field.TypeTime, Nullable: true},
		{Name: "read_at", Type: field.TypeTime, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_users_notifications",
				Columns:    []*schema.Column{NotificationsColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "notification_user_id_read",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[21], NotificationsColumns[8]},
			},
			{
				Name:    "notification_user_id_archived",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[21], NotificationsColumns[9]},
			},
			{
				Name:    "notification_group_key",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[15]},
			},
			{
				Name:    "notification_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[1]},
			},
			{
				Name:    "notification_dedupe_key",
				Unique:  true,
				Columns: []*schema.Column{NotificationsColumns[16]},
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "short_description", Type: field.TypeString, Nullable: true},
		{Name: "long_description", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeInt64, Nullable: true},
		{Name: "currency", Type: field.TypeString, Nullable: true},
		{Name: "stock", Type: field.TypeInt, Nullable: true},
		{Name: "weight_grams", Type: field.TypeInt, Nullable: true},
		{Name: "package_length_mm", Type: field.TypeInt, Nullable: true},
		{Name: "package_width_mm", Type: field.TypeInt, Nullable: true},
		{Name: "package_height_mm", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_users_products",
				Columns:    []*schema.Column{ProductsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "refresh_token", Type: field.TypeString, Unique: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "device_id", Type: field.TypeString, Nullable: true},
		{Name: "number_of_uses", Type: field.TypeUint64, Default: 0},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "last_used_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"USER", "ADMIN", "SUPERADMIN"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		NotificationsTable,
		ProductsTable,
		SessionsTable,
		UsersTable,
	}
)

func init() {
	NotificationsTable.ForeignKeys[0].RefTable = UsersTable
	NotificationsTable.Annotation = &entsql.Annotation{
		Table: "notifications",
	}
	ProductsTable.ForeignKeys[0].RefTable = UsersTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
}
