// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/notification"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdate) SetUpdatedAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *NotificationUpdate) SetUserID(v uuid.UUID) *NotificationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableUserID(v *uuid.UUID) *NotificationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *NotificationUpdate) SetTitle(v string) *NotificationUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableTitle(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *NotificationUpdate) SetMessage(v string) *NotificationUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableMessage(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *NotificationUpdate) SetType(v notification.Type) *NotificationUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableType(v *notification.Type) *NotificationUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *NotificationUpdate) SetPriority(v notification.Priority) *NotificationUpdate {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillablePriority(v *notification.Priority) *NotificationUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// SetChannel sets the "channel" field.
func (_u *NotificationUpdate) SetChannel(v notification.Channel) *NotificationUpdate {
	_u.mutation.SetChannel(v)
	return _u
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableChannel(v *notification.Channel) *NotificationUpdate {
	if v != nil {
		_u.SetChannel(*v)
	}
	return _u
}

// SetRead sets the "read" field.
func (_u *NotificationUpdate) SetRead(v bool) *NotificationUpdate {
	_u.mutation.SetRead(v)
	return _u
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableRead(v *bool) *NotificationUpdate {
	if v != nil {
		_u.SetRead(*v)
	}
	return _u
}

// SetArchived sets the "archived" field.
func (_u *NotificationUpdate) SetArchived(v bool) *NotificationUpdate {
	_u.mutation.SetArchived(v)
	return _u
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableArchived(v *bool) *NotificationUpdate {
	if v != nil {
		_u.SetArchived(*v)
	}
	return _u
}

// SetSticky sets the "sticky" field.
func (_u *NotificationUpdate) SetSticky(v bool) *NotificationUpdate {
	_u.mutation.SetSticky(v)
	return _u
}

// SetNillableSticky sets the "sticky" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableSticky(v *bool) *NotificationUpdate {
	if v != nil {
		_u.SetSticky(*v)
	}
	return _u
}

// SetLink sets the "link" field.
func (_u *NotificationUpdate) SetLink(v string) *NotificationUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableLink(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *NotificationUpdate) ClearLink() *NotificationUpdate {
	_u.mutation.ClearLink()
	return _u
}

// SetAction sets the "action" field.
func (_u *NotificationUpdate) SetAction(v string) *NotificationUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableAction(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *NotificationUpdate) ClearAction() *NotificationUpdate {
	_u.mutation.ClearAction()
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *NotificationUpdate) SetResourceType(v string) *NotificationUpdate {
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableResourceType(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// ClearResourceType clears the value of the "resource_type" field.
func (_u *NotificationUpdate) ClearResourceType() *NotificationUpdate {
	_u.mutation.ClearResourceType()
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *NotificationUpdate) SetResourceID(v string) *NotificationUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableResourceID(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// ClearResourceID clears the value of the "resource_id" field.
func (_u *NotificationUpdate) ClearResourceID() *NotificationUpdate {
	_u.mutation.ClearResourceID()
	return _u
}

// SetGroupKey sets the "group_key" field.
func (_u *NotificationUpdate) SetGroupKey(v string) *NotificationUpdate {
	_u.mutation.SetGroupKey(v)
	return _u
}

// SetNillableGroupKey sets the "group_key" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableGroupKey(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetGroupKey(*v)
	}
	return _u
}

// ClearGroupKey clears the value of the "group_key" field.
func (_u *NotificationUpdate) ClearGroupKey() *NotificationUpdate {
	_u.mutation.ClearGroupKey()
	return _u
}

// SetDedupeKey sets the "dedupe_key" field.
func (_u *NotificationUpdate) SetDedupeKey(v string) *NotificationUpdate {
	_u.mutation.SetDedupeKey(v)
	return _u
}

// SetNillableDedupeKey sets the "dedupe_key" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableDedupeKey(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetDedupeKey(*v)
	}
	return _u
}

// ClearDedupeKey clears the value of the "dedupe_key" field.
func (_u *NotificationUpdate) ClearDedupeKey() *NotificationUpdate {
	_u.mutation.ClearDedupeKey()
	return _u
}

// SetDeliveredAt sets the "delivered_at" field.
func (_u *NotificationUpdate) SetDeliveredAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetDeliveredAt(v)
	return _u
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableDeliveredAt(v *time.Time) *NotificationUpdate {
	if v != nil {
		_u.SetDeliveredAt(*v)
	}
	return _u
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (_u *NotificationUpdate) ClearDeliveredAt() *NotificationUpdate {
	_u.mutation.ClearDeliveredAt()
	return _u
}

// SetReadAt sets the "read_at" field.
func (_u *NotificationUpdate) SetReadAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetReadAt(v)
	return _u
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableReadAt(v *time.Time) *NotificationUpdate {
	if v != nil {
		_u.SetReadAt(*v)
	}
	return _u
}

// ClearReadAt clears the value of the "read_at" field.
func (_u *NotificationUpdate) ClearReadAt() *NotificationUpdate {
	_u.mutation.ClearReadAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *NotificationUpdate) SetExpiresAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableExpiresAt(v *time.Time) *NotificationUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *NotificationUpdate) ClearExpiresAt() *NotificationUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetMeta sets the "meta" field.
func (_u *NotificationUpdate) SetMeta(v map[string]interface{}) *NotificationUpdate {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *NotificationUpdate) ClearMeta() *NotificationUpdate {
	_u.mutation.ClearMeta()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *NotificationUpdate) SetUser(v *User) *NotificationUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdate) Mutation() *NotificationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *NotificationUpdate) ClearUser() *NotificationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := notification.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "Notification.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := notification.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "Notification.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := notification.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`db: validator failed for field "Notification.priority": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Channel(); ok {
		if err := notification.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`db: validator failed for field "Notification.channel": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := notification.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`db: validator failed for field "Notification.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := notification.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "Notification.action": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResourceType(); ok {
		if err := notification.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`db: validator failed for field "Notification.resource_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResourceID(); ok {
		if err := notification.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`db: validator failed for field "Notification.resource_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GroupKey(); ok {
		if err := notification.GroupKeyValidator(v); err != nil {
			return &ValidationError{Name: "group_key", err: fmt.Errorf(`db: validator failed for field "Notification.group_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DedupeKey(); ok {
		if err := notification.DedupeKeyValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_key", err: fmt.Errorf(`db: validator failed for field "Notification.dedupe_key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Notification.user"`)
	}
	return nil
}

func (_u *NotificationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(notification.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Channel(); ok {
		_spec.SetField(notification.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Archived(); ok {
		_spec.SetField(notification.FieldArchived, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sticky(); ok {
		_spec.SetField(notification.FieldSticky, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(notification.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(notification.FieldAction, field.TypeString, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(notification.FieldAction, field.TypeString)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(notification.FieldResourceType, field.TypeString, value)
	}
	if _u.mutation.ResourceTypeCleared() {
		_spec.ClearField(notification.FieldResourceType, field.TypeString)
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(notification.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.ResourceIDCleared() {
		_spec.ClearField(notification.FieldResourceID, field.TypeString)
	}
	if value, ok := _u.mutation.GroupKey(); ok {
		_spec.SetField(notification.FieldGroupKey, field.TypeString, value)
	}
	if _u.mutation.GroupKeyCleared() {
		_spec.ClearField(notification.FieldGroupKey, field.TypeString)
	}
	if value, ok := _u.mutation.DedupeKey(); ok {
		_spec.SetField(notification.FieldDedupeKey, field.TypeString, value)
	}
	if _u.mutation.DedupeKeyCleared() {
		_spec.ClearField(notification.FieldDedupeKey, field.TypeString)
	}
	if value, ok := _u.mutation.DeliveredAt(); ok {
		_spec.SetField(notification.FieldDeliveredAt, field.TypeTime, value)
	}
	if _u.mutation.DeliveredAtCleared() {
		_spec.ClearField(notification.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if _u.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(notification.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(notification.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(notification.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(notification.FieldMeta, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdateOne) SetUpdatedAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *NotificationUpdateOne) SetUserID(v uuid.UUID) *NotificationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableUserID(v *uuid.UUID) *NotificationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *NotificationUpdateOne) SetTitle(v string) *NotificationUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableTitle(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *NotificationUpdateOne) SetMessage(v string) *NotificationUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableMessage(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *NotificationUpdateOne) SetType(v notification.Type) *NotificationUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableType(v *notification.Type) *NotificationUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *NotificationUpdateOne) SetPriority(v notification.Priority) *NotificationUpdateOne {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillablePriority(v *notification.Priority) *NotificationUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// SetChannel sets the "channel" field.
func (_u *NotificationUpdateOne) SetChannel(v notification.Channel) *NotificationUpdateOne {
	_u.mutation.SetChannel(v)
	return _u
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableChannel(v *notification.Channel) *NotificationUpdateOne {
	if v != nil {
		_u.SetChannel(*v)
	}
	return _u
}

// SetRead sets the "read" field.
func (_u *NotificationUpdateOne) SetRead(v bool) *NotificationUpdateOne {
	_u.mutation.SetRead(v)
	return _u
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableRead(v *bool) *NotificationUpdateOne {
	if v != nil {
		_u.SetRead(*v)
	}
	return _u
}

// SetArchived sets the "archived" field.
func (_u *NotificationUpdateOne) SetArchived(v bool) *NotificationUpdateOne {
	_u.mutation.SetArchived(v)
	return _u
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableArchived(v *bool) *NotificationUpdateOne {
	if v != nil {
		_u.SetArchived(*v)
	}
	return _u
}

// SetSticky sets the "sticky" field.
func (_u *NotificationUpdateOne) SetSticky(v bool) *NotificationUpdateOne {
	_u.mutation.SetSticky(v)
	return _u
}

// SetNillableSticky sets the "sticky" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableSticky(v *bool) *NotificationUpdateOne {
	if v != nil {
		_u.SetSticky(*v)
	}
	return _u
}

// SetLink sets the "link" field.
func (_u *NotificationUpdateOne) SetLink(v string) *NotificationUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableLink(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *NotificationUpdateOne) ClearLink() *NotificationUpdateOne {
	_u.mutation.ClearLink()
	return _u
}

// SetAction sets the "action" field.
func (_u *NotificationUpdateOne) SetAction(v string) *NotificationUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableAction(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// ClearAction clears the value of the "action" field.
func (_u *NotificationUpdateOne) ClearAction() *NotificationUpdateOne {
	_u.mutation.ClearAction()
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *NotificationUpdateOne) SetResourceType(v string) *NotificationUpdateOne {
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableResourceType(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// ClearResourceType clears the value of the "resource_type" field.
func (_u *NotificationUpdateOne) ClearResourceType() *NotificationUpdateOne {
	_u.mutation.ClearResourceType()
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *NotificationUpdateOne) SetResourceID(v string) *NotificationUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableResourceID(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// ClearResourceID clears the value of the "resource_id" field.
func (_u *NotificationUpdateOne) ClearResourceID() *NotificationUpdateOne {
	_u.mutation.ClearResourceID()
	return _u
}

// SetGroupKey sets the "group_key" field.
func (_u *NotificationUpdateOne) SetGroupKey(v string) *NotificationUpdateOne {
	_u.mutation.SetGroupKey(v)
	return _u
}

// SetNillableGroupKey sets the "group_key" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableGroupKey(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetGroupKey(*v)
	}
	return _u
}

// ClearGroupKey clears the value of the "group_key" field.
func (_u *NotificationUpdateOne) ClearGroupKey() *NotificationUpdateOne {
	_u.mutation.ClearGroupKey()
	return _u
}

// SetDedupeKey sets the "dedupe_key" field.
func (_u *NotificationUpdateOne) SetDedupeKey(v string) *NotificationUpdateOne {
	_u.mutation.SetDedupeKey(v)
	return _u
}

// SetNillableDedupeKey sets the "dedupe_key" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableDedupeKey(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetDedupeKey(*v)
	}
	return _u
}

// ClearDedupeKey clears the value of the "dedupe_key" field.
func (_u *NotificationUpdateOne) ClearDedupeKey() *NotificationUpdateOne {
	_u.mutation.ClearDedupeKey()
	return _u
}

// SetDeliveredAt sets the "delivered_at" field.
func (_u *NotificationUpdateOne) SetDeliveredAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetDeliveredAt(v)
	return _u
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableDeliveredAt(v *time.Time) *NotificationUpdateOne {
	if v != nil {
		_u.SetDeliveredAt(*v)
	}
	return _u
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (_u *NotificationUpdateOne) ClearDeliveredAt() *NotificationUpdateOne {
	_u.mutation.ClearDeliveredAt()
	return _u
}

// SetReadAt sets the "read_at" field.
func (_u *NotificationUpdateOne) SetReadAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetReadAt(v)
	return _u
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableReadAt(v *time.Time) *NotificationUpdateOne {
	if v != nil {
		_u.SetReadAt(*v)
	}
	return _u
}

// ClearReadAt clears the value of the "read_at" field.
func (_u *NotificationUpdateOne) ClearReadAt() *NotificationUpdateOne {
	_u.mutation.ClearReadAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *NotificationUpdateOne) SetExpiresAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableExpiresAt(v *time.Time) *NotificationUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *NotificationUpdateOne) ClearExpiresAt() *NotificationUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetMeta sets the "meta" field.
func (_u *NotificationUpdateOne) SetMeta(v map[string]interface{}) *NotificationUpdateOne {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *NotificationUpdateOne) ClearMeta() *NotificationUpdateOne {
	_u.mutation.ClearMeta()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *NotificationUpdateOne) SetUser(v *User) *NotificationUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdateOne) Mutation() *NotificationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *NotificationUpdateOne) ClearUser() *NotificationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Notification entity.
func (_u *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := notification.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`db: validator failed for field "Notification.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := notification.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "Notification.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "Notification.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := notification.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`db: validator failed for field "Notification.priority": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Channel(); ok {
		if err := notification.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`db: validator failed for field "Notification.channel": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := notification.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`db: validator failed for field "Notification.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Action(); ok {
		if err := notification.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`db: validator failed for field "Notification.action": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResourceType(); ok {
		if err := notification.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`db: validator failed for field "Notification.resource_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ResourceID(); ok {
		if err := notification.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`db: validator failed for field "Notification.resource_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GroupKey(); ok {
		if err := notification.GroupKeyValidator(v); err != nil {
			return &ValidationError{Name: "group_key", err: fmt.Errorf(`db: validator failed for field "Notification.group_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DedupeKey(); ok {
		if err := notification.DedupeKeyValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_key", err: fmt.Errorf(`db: validator failed for field "Notification.dedupe_key": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Notification.user"`)
	}
	return nil
}

func (_u *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(notification.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Channel(); ok {
		_spec.SetField(notification.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Archived(); ok {
		_spec.SetField(notification.FieldArchived, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sticky(); ok {
		_spec.SetField(notification.FieldSticky, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(notification.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(notification.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(notification.FieldAction, field.TypeString, value)
	}
	if _u.mutation.ActionCleared() {
		_spec.ClearField(notification.FieldAction, field.TypeString)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(notification.FieldResourceType, field.TypeString, value)
	}
	if _u.mutation.ResourceTypeCleared() {
		_spec.ClearField(notification.FieldResourceType, field.TypeString)
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(notification.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.ResourceIDCleared() {
		_spec.ClearField(notification.FieldResourceID, field.TypeString)
	}
	if value, ok := _u.mutation.GroupKey(); ok {
		_spec.SetField(notification.FieldGroupKey, field.TypeString, value)
	}
	if _u.mutation.GroupKeyCleared() {
		_spec.ClearField(notification.FieldGroupKey, field.TypeString)
	}
	if value, ok := _u.mutation.DedupeKey(); ok {
		_spec.SetField(notification.FieldDedupeKey, field.TypeString, value)
	}
	if _u.mutation.DedupeKeyCleared() {
		_spec.ClearField(notification.FieldDedupeKey, field.TypeString)
	}
	if value, ok := _u.mutation.DeliveredAt(); ok {
		_spec.SetField(notification.FieldDeliveredAt, field.TypeTime, value)
	}
	if _u.mutation.DeliveredAtCleared() {
		_spec.ClearField(notification.FieldDeliveredAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if _u.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(notification.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(notification.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(notification.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(notification.FieldMeta, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
