// Code generated by ent, DO NOT EDIT.

package enttest

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/alfariiizi/vandor/internal/infrastructure/db/rest"
	"github.com/hedwigz/entviz/examples/ent"
)

type TestServer struct {
	t            *testing.T
	handler      http.Handler
	logResponses bool
}

// NewServer instantiates a new TestServer and HTTP handler with the provided ent client
// and configuration. If you want to load custom middleware or similar, you can use  [WithExisting]
// instead, to pass in your own router/handler.
func NewServer(t *testing.T, db *ent.Client, cfg *rest.ServerConfig) *TestServer {
	srv, err := rest.NewServer(db, cfg)
	if err != nil {
		t.Fatalf("failed to create server: %v", err)
		return nil
	}
	return WithExisting(t, srv.Handler())
}

// WithExisting returns a new TestServer using an existing http.Handler of your choice.
func WithExisting(t *testing.T, r http.Handler) *TestServer {
	return &TestServer{
		t:       t,
		handler: r,
	}
}

// WithLogResponses enables logging of all responses to the internal handler.
func (ts *TestServer) WithLogResponses(v bool) *TestServer {
	ts.logResponses = v
	return ts
}

// Response encapsulates the raw response, unmarshalled value, and error response (if any).
type Response[T any] struct {
	Data  *httptest.ResponseRecorder
	Value *T
	Error *rest.ErrorResponse
}

// Must returns the response, or fails with a fatal test error if the request failed.
func (r Response[T]) Must(t *testing.T) Response[T] {
	if r.Error != nil {
		t.Fatalf("request failed: %s", r.Error.Error)
	}
	return r
}

// Request executes a request against the TestServer, and returns the response recorder and
// response, auto-marshalling JSON to the provided type. If T is "string", the response body
// is returned as-is.
func Request[T any](ctx context.Context, ts *TestServer, method, path string, data any) (resp Response[T]) {
	ts.t.Helper()

	var body io.Reader

	if data != nil && data != http.NoBody {
		buf := &bytes.Buffer{}
		enc := json.NewEncoder(buf)
		err := enc.Encode(data)
		if err != nil {
			ts.t.Fatalf("failed to encode request body: %v", err)
		}
		body = buf
	}

	req := httptest.NewRequest(method, path, body).WithContext(ctx)

	if data != nil && data != http.NoBody {
		req.Header.Set("Content-Type", "application/json")
	}

	resp.Data = httptest.NewRecorder()
	resp.Data.Body = &bytes.Buffer{}

	ts.handler.ServeHTTP(resp.Data, req)

	if ts.logResponses {
		ts.t.Logf("request:\nmethod:%q\npath:%q\ncode:%d\nresponse:\n%s", method, path, resp.Data.Code, resp.Data.Body.String())
	}

	if resp.Data.Code == http.StatusNoContent || resp.Data.Code < 200 || resp.Data.Code >= 300 {
		if resp.Data.Code == http.StatusNoContent {
			return resp
		}

		errResp := &rest.ErrorResponse{}
		err := json.Unmarshal(resp.Data.Body.Bytes(), errResp)
		if err != nil {
			ts.t.Fatalf("failed to decode error response: %v", err)
		}
		if errResp.Error != "" {
			resp.Error = errResp
			return resp
		}
	}

	if _, ok := any(resp.Value).(string); ok {
		*resp.Value = any(resp.Data.Body.String()).(T) //nolint:erespcheck
		return resp
	}

	resp.Value = new(T)
	err := json.Unmarshal(resp.Data.Body.Bytes(), resp.Value)
	if err != nil {
		ts.t.Fatalf("failed to decode response: %v", err)
	}
	return resp
}

// Creator represents a function that creates a new entity (returns an *ent.<type>Create).
type Creator[T any] func(*ent.Client) *T

// Multiple creates n entities using the provided creator function.
func Multiple[T any](fn Creator[T], db *ent.Client, n int) []*T {
	var items []*T
	for range n {
		items = append(items, fn(db))
	}
	return items
}
