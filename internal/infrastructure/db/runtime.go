// Code generated by ent, DO NOT EDIT.

package db

import (
	"time"

	"github.com/alfariiizi/vandor/database/schema"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/notification"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/session"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	notificationMixin := schema.Notification{}.Mixin()
	notificationMixinFields0 := notificationMixin[0].Fields()
	_ = notificationMixinFields0
	notificationFields := schema.Notification{}.Fields()
	_ = notificationFields
	// notificationDescCreatedAt is the schema descriptor for created_at field.
	notificationDescCreatedAt := notificationMixinFields0[0].Descriptor()
	// notification.DefaultCreatedAt holds the default value on creation for the created_at field.
	notification.DefaultCreatedAt = notificationDescCreatedAt.Default.(func() time.Time)
	// notificationDescUpdatedAt is the schema descriptor for updated_at field.
	notificationDescUpdatedAt := notificationMixinFields0[1].Descriptor()
	// notification.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	notification.DefaultUpdatedAt = notificationDescUpdatedAt.Default.(func() time.Time)
	// notification.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	notification.UpdateDefaultUpdatedAt = notificationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// notificationDescTitle is the schema descriptor for title field.
	notificationDescTitle := notificationFields[2].Descriptor()
	// notification.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	notification.TitleValidator = func() func(string) error {
		validators := notificationDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// notificationDescMessage is the schema descriptor for message field.
	notificationDescMessage := notificationFields[3].Descriptor()
	// notification.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	notification.MessageValidator = notificationDescMessage.Validators[0].(func(string) error)
	// notificationDescRead is the schema descriptor for read field.
	notificationDescRead := notificationFields[7].Descriptor()
	// notification.DefaultRead holds the default value on creation for the read field.
	notification.DefaultRead = notificationDescRead.Default.(bool)
	// notificationDescArchived is the schema descriptor for archived field.
	notificationDescArchived := notificationFields[8].Descriptor()
	// notification.DefaultArchived holds the default value on creation for the archived field.
	notification.DefaultArchived = notificationDescArchived.Default.(bool)
	// notificationDescSticky is the schema descriptor for sticky field.
	notificationDescSticky := notificationFields[9].Descriptor()
	// notification.DefaultSticky holds the default value on creation for the sticky field.
	notification.DefaultSticky = notificationDescSticky.Default.(bool)
	// notificationDescLink is the schema descriptor for link field.
	notificationDescLink := notificationFields[10].Descriptor()
	// notification.LinkValidator is a validator for the "link" field. It is called by the builders before save.
	notification.LinkValidator = notificationDescLink.Validators[0].(func(string) error)
	// notificationDescAction is the schema descriptor for action field.
	notificationDescAction := notificationFields[11].Descriptor()
	// notification.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	notification.ActionValidator = notificationDescAction.Validators[0].(func(string) error)
	// notificationDescResourceType is the schema descriptor for resource_type field.
	notificationDescResourceType := notificationFields[12].Descriptor()
	// notification.ResourceTypeValidator is a validator for the "resource_type" field. It is called by the builders before save.
	notification.ResourceTypeValidator = notificationDescResourceType.Validators[0].(func(string) error)
	// notificationDescResourceID is the schema descriptor for resource_id field.
	notificationDescResourceID := notificationFields[13].Descriptor()
	// notification.ResourceIDValidator is a validator for the "resource_id" field. It is called by the builders before save.
	notification.ResourceIDValidator = notificationDescResourceID.Validators[0].(func(string) error)
	// notificationDescGroupKey is the schema descriptor for group_key field.
	notificationDescGroupKey := notificationFields[14].Descriptor()
	// notification.GroupKeyValidator is a validator for the "group_key" field. It is called by the builders before save.
	notification.GroupKeyValidator = notificationDescGroupKey.Validators[0].(func(string) error)
	// notificationDescDedupeKey is the schema descriptor for dedupe_key field.
	notificationDescDedupeKey := notificationFields[15].Descriptor()
	// notification.DedupeKeyValidator is a validator for the "dedupe_key" field. It is called by the builders before save.
	notification.DedupeKeyValidator = notificationDescDedupeKey.Validators[0].(func(string) error)
	// notificationDescID is the schema descriptor for id field.
	notificationDescID := notificationFields[0].Descriptor()
	// notification.DefaultID holds the default value on creation for the id field.
	notification.DefaultID = notificationDescID.Default.(func() uuid.UUID)
	productMixin := schema.Product{}.Mixin()
	productMixinFields0 := productMixin[0].Fields()
	_ = productMixinFields0
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescCreateTime is the schema descriptor for create_time field.
	productDescCreateTime := productMixinFields0[0].Descriptor()
	// product.DefaultCreateTime holds the default value on creation for the create_time field.
	product.DefaultCreateTime = productDescCreateTime.Default.(func() time.Time)
	// productDescUpdateTime is the schema descriptor for update_time field.
	productDescUpdateTime := productMixinFields0[1].Descriptor()
	// product.DefaultUpdateTime holds the default value on creation for the update_time field.
	product.DefaultUpdateTime = productDescUpdateTime.Default.(func() time.Time)
	// product.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	product.UpdateDefaultUpdateTime = productDescUpdateTime.UpdateDefault.(func() time.Time)
	// productDescID is the schema descriptor for id field.
	productDescID := productFields[0].Descriptor()
	// product.DefaultID holds the default value on creation for the id field.
	product.DefaultID = productDescID.Default.(func() uuid.UUID)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescRefreshToken is the schema descriptor for refresh_token field.
	sessionDescRefreshToken := sessionFields[1].Descriptor()
	// session.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	session.RefreshTokenValidator = sessionDescRefreshToken.Validators[0].(func(string) error)
	// sessionDescNumberOfUses is the schema descriptor for number_of_uses field.
	sessionDescNumberOfUses := sessionFields[5].Descriptor()
	// session.DefaultNumberOfUses holds the default value on creation for the number_of_uses field.
	session.DefaultNumberOfUses = sessionDescNumberOfUses.Default.(uint64)
	// session.NumberOfUsesValidator is a validator for the "number_of_uses" field. It is called by the builders before save.
	session.NumberOfUsesValidator = func() func(uint64) error {
		validators := sessionDescNumberOfUses.Validators
		fns := [...]func(uint64) error{
			validators[0].(func(uint64) error),
			validators[1].(func(uint64) error),
		}
		return func(number_of_uses uint64) error {
			for _, fn := range fns {
				if err := fn(number_of_uses); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sessionDescExpiresAt is the schema descriptor for expires_at field.
	sessionDescExpiresAt := sessionFields[6].Descriptor()
	// session.DefaultExpiresAt holds the default value on creation for the expires_at field.
	session.DefaultExpiresAt = sessionDescExpiresAt.Default.(func() time.Time)
	// sessionDescLastUsedAt is the schema descriptor for last_used_at field.
	sessionDescLastUsedAt := sessionFields[7].Descriptor()
	// session.DefaultLastUsedAt holds the default value on creation for the last_used_at field.
	session.DefaultLastUsedAt = sessionDescLastUsedAt.Default.(func() time.Time)
	// sessionDescCreatedAt is the schema descriptor for created_at field.
	sessionDescCreatedAt := sessionFields[8].Descriptor()
	// session.DefaultCreatedAt holds the default value on creation for the created_at field.
	session.DefaultCreatedAt = sessionDescCreatedAt.Default.(func() time.Time)
	// sessionDescID is the schema descriptor for id field.
	sessionDescID := sessionFields[0].Descriptor()
	// session.DefaultID holds the default value on creation for the id field.
	session.DefaultID = sessionDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[4].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
