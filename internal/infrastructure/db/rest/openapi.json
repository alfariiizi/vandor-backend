{
    "openapi": "3.0.3",
    "info": {
        "title": "Admin API for Vandor App",
        "version": "v1.0.1"
    },
    "paths": {
        "/notifications": {
            "summary": "List notifications",
            "description": "List Notification entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "List notifications",
                "description": "List Notification entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listNotifications",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/NotificationSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Notification.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Create a new notification",
                "description": "Create a new Notification entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createNotification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Notification entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/notifications/{notificationID}": {
            "summary": "Operate on a single Notification entity",
            "description": "Operate on a single Notification entity by its ID.",
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Retrieve a notification",
                "description": "Retrieve a single Notification entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getNotification",
                "responses": {
                    "200": {
                        "description": "The requested Notification entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete a notification",
                "description": "Delete a single Notification entity by its ID.",
                "operationId": "deleteNotification",
                "responses": {
                    "204": {
                        "description": "The requested Notification entity."
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Update a notification",
                "description": "Update an existing Notification entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateNotification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Notification entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/NotificationID"
                }
            ]
        },
        "/notifications/{notificationID}/user": {
            "summary": "Get a notifications associated user",
            "description": "Get a notifications associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Notifications",
                    "Users"
                ],
                "summary": "Get a notifications associated user",
                "description": "Get a notifications associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getNotificationUser",
                "responses": {
                    "200": {
                        "description": "The requested user entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/NotificationID"
                }
            ]
        },
        "/openapi.json": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get OpenAPI spec",
                "description": "Get the OpenAPI specification for this service.",
                "operationId": "getOpenAPI",
                "responses": {
                    "200": {
                        "description": "OpenAPI specification was found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            }
        },
        "/products": {
            "summary": "List products",
            "description": "List Product entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "List products",
                "description": "List Product entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listProducts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/ProductSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Product.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Create a new Product entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Product entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/products/{productID}": {
            "summary": "Operate on a single Product entity",
            "description": "Operate on a single Product entity by its ID.",
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a product",
                "description": "Retrieve a single Product entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getProduct",
                "responses": {
                    "200": {
                        "description": "The requested Product entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Delete a single Product entity by its ID.",
                "operationId": "deleteProduct",
                "responses": {
                    "204": {
                        "description": "The requested Product entity."
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "description": "Update an existing Product entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Product entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/ProductID"
                }
            ]
        },
        "/products/{productID}/user": {
            "summary": "Get a products associated user",
            "description": "Get a products associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Products",
                    "Users"
                ],
                "summary": "Get a products associated user",
                "description": "Get a products associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getProductUser",
                "responses": {
                    "200": {
                        "description": "The requested user entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/ProductID"
                }
            ]
        },
        "/sessions": {
            "summary": "List sessions",
            "description": "List Session entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "List sessions",
                "description": "List Session entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listSessions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/SessionSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Session.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Create a new session",
                "description": "Create a new Session entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createSession",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SessionCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Session entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/sessions/{sessionID}": {
            "summary": "Operate on a single Session entity",
            "description": "Operate on a single Session entity by its ID.",
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Retrieve a session",
                "description": "Retrieve a single Session entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getSession",
                "responses": {
                    "200": {
                        "description": "The requested Session entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete a session",
                "description": "Delete a single Session entity by its ID.",
                "operationId": "deleteSession",
                "responses": {
                    "204": {
                        "description": "The requested Session entity."
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Update a session",
                "description": "Update an existing Session entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateSession",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SessionUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Session entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SessionID"
                }
            ]
        },
        "/sessions/{sessionID}/user": {
            "summary": "Get a sessions associated user",
            "description": "Get a sessions associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Sessions",
                    "Users"
                ],
                "summary": "Get a sessions associated user",
                "description": "Get a sessions associated user (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getSessionUser",
                "responses": {
                    "200": {
                        "description": "The requested user entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/SessionID"
                }
            ]
        },
        "/users": {
            "summary": "List users",
            "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested User.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Create a new User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                }
            ]
        },
        "/users/{userID}": {
            "summary": "Operate on a single User entity",
            "description": "Operate on a single User entity by its ID.",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a user",
                "description": "Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getUser",
                "responses": {
                    "200": {
                        "description": "The requested User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Delete a single User entity by its ID.",
                "operationId": "deleteUser",
                "responses": {
                    "204": {
                        "description": "The requested User entity."
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Update an existing User entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update User entity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        },
        "/users/{userID}/notifications": {
            "summary": "List a users associated notifications",
            "description": "List a users associated notifications (Notification entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Notifications"
                ],
                "summary": "List a users associated notifications",
                "description": "List a users associated notifications (Notification entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserNotifications",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/NotificationSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested notifications.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        },
        "/users/{userID}/products": {
            "summary": "List a users associated products",
            "description": "List a users associated products (Product entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Products"
                ],
                "summary": "List a users associated products",
                "description": "List a users associated products (Product entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserProducts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/ProductSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested products.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        },
        "/users/{userID}/sessions": {
            "summary": "List a users associated sessions",
            "description": "List a users associated sessions (Session entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Sessions"
                ],
                "summary": "List a users associated sessions",
                "description": "List a users associated sessions (Session entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserSessions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/SessionSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested sessions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "ErrorBadRequest": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Bad Request"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 400
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorConflict": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Conflict"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 409
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorForbidden": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Forbidden"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 403
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorInternalServerError": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Internal Server Error"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 500
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorNotFound": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Not Found"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 404
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorTooManyRequests": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Too Many Requests"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 429
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorUnauthorized": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Unauthorized"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 401
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "FilterOperation": {
                "description": "Specifies how to combine multiple filters.",
                "type": "string",
                "enum": [
                    "and",
                    "or"
                ],
                "default": "and"
            },
            "Notification": {
                "description": "A single Notification entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Notification entity.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "description": "Creation time (UTC)",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update time (UTC)",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "title": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/NotificationPriorityEnum"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/NotificationChannelEnum"
                    },
                    "read": {
                        "type": "boolean",
                        "default": false
                    },
                    "archived": {
                        "type": "boolean",
                        "default": false
                    },
                    "sticky": {
                        "type": "boolean",
                        "default": false
                    },
                    "link": {
                        "type": "string",
                        "nullable": true
                    },
                    "action": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "group_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "dedupe_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "delivered_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "meta": {}
                },
                "required": [
                    "id",
                    "created_at",
                    "updated_at",
                    "user_id",
                    "title",
                    "message",
                    "type",
                    "priority",
                    "channel",
                    "read",
                    "archived",
                    "sticky"
                ]
            },
            "NotificationChannelEnum": {
                "type": "string",
                "enum": [
                    "in_app",
                    "email",
                    "push",
                    "sms",
                    "webhook"
                ]
            },
            "NotificationCreate": {
                "description": "A single Notification entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "created_at": {
                        "description": "Creation time (UTC)",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update time (UTC)",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "title": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/NotificationPriorityEnum"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/NotificationChannelEnum"
                    },
                    "read": {
                        "type": "boolean",
                        "default": false
                    },
                    "archived": {
                        "type": "boolean",
                        "default": false
                    },
                    "sticky": {
                        "type": "boolean",
                        "default": false
                    },
                    "link": {
                        "type": "string",
                        "nullable": true
                    },
                    "action": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "group_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "dedupe_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "delivered_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "meta": {}
                },
                "required": [
                    "user_id",
                    "title",
                    "message"
                ]
            },
            "NotificationList": {
                "description": "A paginated result set of Notification entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "NotificationPriorityEnum": {
                "type": "string",
                "enum": [
                    "low",
                    "normal",
                    "high",
                    "urgent"
                ]
            },
            "NotificationRead": {
                "$ref": "#/components/schemas/Notification"
            },
            "NotificationSortableFields": {
                "description": "All potential sortable fields for Notification entities.",
                "type": "string",
                "enum": [
                    "id",
                    "random",
                    "user.email"
                ],
                "default": "id"
            },
            "NotificationTypeEnum": {
                "type": "string",
                "enum": [
                    "info",
                    "success",
                    "warning",
                    "error"
                ]
            },
            "NotificationUpdate": {
                "description": "A single Notification entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "updated_at": {
                        "description": "Last update time (UTC)",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "title": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/NotificationPriorityEnum"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/NotificationChannelEnum"
                    },
                    "read": {
                        "type": "boolean",
                        "default": false
                    },
                    "archived": {
                        "type": "boolean",
                        "default": false
                    },
                    "sticky": {
                        "type": "boolean",
                        "default": false
                    },
                    "link": {
                        "type": "string",
                        "nullable": true
                    },
                    "action": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "resource_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "group_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "dedupe_key": {
                        "type": "string",
                        "nullable": true
                    },
                    "delivered_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "meta": {}
                }
            },
            "PagedResponse": {
                "type": "object",
                "properties": {
                    "page": {
                        "description": "Page which the results are associated with.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "last_page": {
                        "description": "The number of the last page of results.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 3
                    },
                    "is_last_page": {
                        "description": "If true, the current results are the last page of results.",
                        "type": "boolean",
                        "example": false
                    },
                    "total_count": {
                        "description": "The total number of results based on the provided query.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 123
                    }
                },
                "required": [
                    "page",
                    "last_page",
                    "is_last_page",
                    "total_count"
                ]
            },
            "Product": {
                "description": "A single Product entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Product entity.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "create_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "description": "nama_produk / product title",
                        "type": "string"
                    },
                    "short_description": {
                        "type": "string"
                    },
                    "long_description": {
                        "type": "string"
                    },
                    "price": {
                        "description": "price in smallest currency unit (IDR -\u003e 107000)",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "currency": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "integer"
                    },
                    "weight_grams": {
                        "description": "weight in grams, convert if source uses different unit",
                        "type": "integer"
                    },
                    "package_length_mm": {
                        "type": "integer"
                    },
                    "package_width_mm": {
                        "type": "integer"
                    },
                    "package_height_mm": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "id",
                    "create_time",
                    "update_time",
                    "user_id"
                ]
            },
            "ProductCreate": {
                "description": "A single Product entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "create_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "description": "nama_produk / product title",
                        "type": "string"
                    },
                    "short_description": {
                        "type": "string"
                    },
                    "long_description": {
                        "type": "string"
                    },
                    "price": {
                        "description": "price in smallest currency unit (IDR -\u003e 107000)",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "currency": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "integer"
                    },
                    "weight_grams": {
                        "description": "weight in grams, convert if source uses different unit",
                        "type": "integer"
                    },
                    "package_length_mm": {
                        "type": "integer"
                    },
                    "package_width_mm": {
                        "type": "integer"
                    },
                    "package_height_mm": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "user_id"
                ]
            },
            "ProductList": {
                "description": "A paginated result set of Product entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProductRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "ProductRead": {
                "$ref": "#/components/schemas/Product"
            },
            "ProductSortableFields": {
                "description": "All potential sortable fields for Product entities.",
                "type": "string",
                "enum": [
                    "id",
                    "random",
                    "user.email"
                ],
                "default": "id"
            },
            "ProductUpdate": {
                "description": "A single Product entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "update_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "description": "nama_produk / product title",
                        "type": "string"
                    },
                    "short_description": {
                        "type": "string"
                    },
                    "long_description": {
                        "type": "string"
                    },
                    "price": {
                        "description": "price in smallest currency unit (IDR -\u003e 107000)",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "currency": {
                        "type": "string"
                    },
                    "stock": {
                        "type": "integer"
                    },
                    "weight_grams": {
                        "description": "weight in grams, convert if source uses different unit",
                        "type": "integer"
                    },
                    "package_length_mm": {
                        "type": "integer"
                    },
                    "package_width_mm": {
                        "type": "integer"
                    },
                    "package_height_mm": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "Session": {
                "description": "A single Session entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Session entity.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "refresh_token": {
                        "type": "string"
                    },
                    "ip_address": {
                        "type": "string"
                    },
                    "user_agent": {
                        "type": "string"
                    },
                    "device_id": {
                        "type": "string"
                    },
                    "number_of_uses": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": 0,
                        "default": 0
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "last_used_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "id",
                    "refresh_token",
                    "number_of_uses",
                    "expires_at",
                    "last_used_at",
                    "created_at",
                    "user_id"
                ]
            },
            "SessionCreate": {
                "description": "A single Session entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    },
                    "ip_address": {
                        "type": "string"
                    },
                    "user_agent": {
                        "type": "string"
                    },
                    "device_id": {
                        "type": "string"
                    },
                    "number_of_uses": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": 0,
                        "default": 0
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "last_used_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "refresh_token",
                    "user_id"
                ]
            },
            "SessionList": {
                "description": "A paginated result set of Session entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SessionRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "SessionRead": {
                "$ref": "#/components/schemas/Session"
            },
            "SessionSortableFields": {
                "description": "All potential sortable fields for Session entities.",
                "type": "string",
                "enum": [
                    "id",
                    "random",
                    "user.email"
                ],
                "default": "id"
            },
            "SessionUpdate": {
                "description": "A single Session entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "ip_address": {
                        "type": "string"
                    },
                    "user_agent": {
                        "type": "string"
                    },
                    "device_id": {
                        "type": "string"
                    },
                    "number_of_uses": {
                        "type": "integer",
                        "format": "int64",
                        "minimum": 0,
                        "default": 0
                    },
                    "last_used_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "User": {
                "description": "A single User entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity.",
                        "type": "string",
                        "format": "uuid",
                        "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@mail.com"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoleEnum"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "email",
                    "first_name",
                    "last_name",
                    "role",
                    "created_at",
                    "updated_at"
                ]
            },
            "UserCreate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "example": "john@mail.com"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "password_hash": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoleEnum"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "sessions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                },
                "required": [
                    "email",
                    "first_name",
                    "last_name",
                    "password_hash",
                    "role"
                ]
            },
            "UserList": {
                "description": "A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "UserRead": {
                "$ref": "#/components/schemas/User"
            },
            "UserRoleEnum": {
                "type": "string",
                "enum": [
                    "USER",
                    "ADMIN",
                    "SUPERADMIN"
                ]
            },
            "UserSortableFields": {
                "description": "All potential sortable fields for User entities.",
                "type": "string",
                "enum": [
                    "email",
                    "id",
                    "notifications.count",
                    "products.count",
                    "random",
                    "sessions.count"
                ],
                "default": "id"
            },
            "UserUpdate": {
                "description": "A single User entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "example": "john@mail.com"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "password_hash": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoleEnum"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "add_products": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_products": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "add_sessions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_sessions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "add_notifications": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    "remove_notifications": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                }
            }
        },
        "responses": {
            "ErrorBadRequest": {
                "description": "Bad Request (http status code 400)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorBadRequest"
                        }
                    }
                }
            },
            "ErrorConflict": {
                "description": "Conflict (http status code 409)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorConflict"
                        }
                    }
                }
            },
            "ErrorForbidden": {
                "description": "Forbidden (http status code 403)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorForbidden"
                        }
                    }
                }
            },
            "ErrorInternalServerError": {
                "description": "Internal Server Error (http status code 500)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInternalServerError"
                        }
                    }
                }
            },
            "ErrorNotFound": {
                "description": "Not Found (http status code 404)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorNotFound"
                        }
                    }
                }
            },
            "ErrorTooManyRequests": {
                "description": "Too Many Requests (http status code 429)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorTooManyRequests"
                        }
                    }
                }
            },
            "ErrorUnauthorized": {
                "description": "Unauthorized (http status code 401)",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorUnauthorized"
                        }
                    }
                }
            }
        },
        "parameters": {
            "FilterOperation": {
                "name": "filter_op",
                "in": "query",
                "description": "Filter operation to use.",
                "schema": {
                    "$ref": "#/components/schemas/FilterOperation"
                }
            },
            "NotificationID": {
                "name": "notificationID",
                "in": "path",
                "description": "The ID of the Notification to act upon.",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "The page number to retrieve.",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "PrettyResponse": {
                "name": "pretty",
                "in": "query",
                "description": "If set to true, any JSON response will be indented.",
                "schema": {
                    "type": "boolean"
                }
            },
            "ProductID": {
                "name": "productID",
                "in": "path",
                "description": "The ID of the Product to act upon.",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "SessionID": {
                "name": "sessionID",
                "in": "path",
                "description": "The ID of the Session to act upon.",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "UserEmailContains": {
                "name": "email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailContainsFold": {
                "name": "email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEQ": {
                "name": "email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEqualFold": {
                "name": "email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasPrefix": {
                "name": "email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasSuffix": {
                "name": "email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailIn": {
                "name": "email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEmailNEQ": {
                "name": "email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailNotIn": {
                "name": "email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserID": {
                "name": "userID",
                "in": "path",
                "description": "The ID of the User to act upon.",
                "required": true,
                "schema": {
                    "type": "string",
                    "format": "uuid",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "JWT Bearer token in Authorization header",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "security": [
        {
            "bearerAuth": []
        }
    ],
    "tags": [
        {
            "name": "Meta",
            "description": "Includes various endpoints for meta information about the service, like the OpenAPI spec, version, health, etc."
        },
        {
            "name": "Notifications"
        },
        {
            "name": "Users"
        },
        {
            "name": "Products"
        },
        {
            "name": "Sessions"
        }
    ]
}
