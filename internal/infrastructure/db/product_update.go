// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (_u *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProductUpdate) SetUpdateTime(v time.Time) *ProductUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ProductUpdate) SetTitle(v string) *ProductUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableTitle(v *string) *ProductUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ProductUpdate) ClearTitle() *ProductUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetShortDescription sets the "short_description" field.
func (_u *ProductUpdate) SetShortDescription(v string) *ProductUpdate {
	_u.mutation.SetShortDescription(v)
	return _u
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableShortDescription(v *string) *ProductUpdate {
	if v != nil {
		_u.SetShortDescription(*v)
	}
	return _u
}

// ClearShortDescription clears the value of the "short_description" field.
func (_u *ProductUpdate) ClearShortDescription() *ProductUpdate {
	_u.mutation.ClearShortDescription()
	return _u
}

// SetLongDescription sets the "long_description" field.
func (_u *ProductUpdate) SetLongDescription(v string) *ProductUpdate {
	_u.mutation.SetLongDescription(v)
	return _u
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableLongDescription(v *string) *ProductUpdate {
	if v != nil {
		_u.SetLongDescription(*v)
	}
	return _u
}

// ClearLongDescription clears the value of the "long_description" field.
func (_u *ProductUpdate) ClearLongDescription() *ProductUpdate {
	_u.mutation.ClearLongDescription()
	return _u
}

// SetPrice sets the "price" field.
func (_u *ProductUpdate) SetPrice(v int64) *ProductUpdate {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *ProductUpdate) SetNillablePrice(v *int64) *ProductUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *ProductUpdate) AddPrice(v int64) *ProductUpdate {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *ProductUpdate) ClearPrice() *ProductUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *ProductUpdate) SetCurrency(v string) *ProductUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableCurrency(v *string) *ProductUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *ProductUpdate) ClearCurrency() *ProductUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// SetStock sets the "stock" field.
func (_u *ProductUpdate) SetStock(v int) *ProductUpdate {
	_u.mutation.ResetStock()
	_u.mutation.SetStock(v)
	return _u
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableStock(v *int) *ProductUpdate {
	if v != nil {
		_u.SetStock(*v)
	}
	return _u
}

// AddStock adds value to the "stock" field.
func (_u *ProductUpdate) AddStock(v int) *ProductUpdate {
	_u.mutation.AddStock(v)
	return _u
}

// ClearStock clears the value of the "stock" field.
func (_u *ProductUpdate) ClearStock() *ProductUpdate {
	_u.mutation.ClearStock()
	return _u
}

// SetWeightGrams sets the "weight_grams" field.
func (_u *ProductUpdate) SetWeightGrams(v int) *ProductUpdate {
	_u.mutation.ResetWeightGrams()
	_u.mutation.SetWeightGrams(v)
	return _u
}

// SetNillableWeightGrams sets the "weight_grams" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableWeightGrams(v *int) *ProductUpdate {
	if v != nil {
		_u.SetWeightGrams(*v)
	}
	return _u
}

// AddWeightGrams adds value to the "weight_grams" field.
func (_u *ProductUpdate) AddWeightGrams(v int) *ProductUpdate {
	_u.mutation.AddWeightGrams(v)
	return _u
}

// ClearWeightGrams clears the value of the "weight_grams" field.
func (_u *ProductUpdate) ClearWeightGrams() *ProductUpdate {
	_u.mutation.ClearWeightGrams()
	return _u
}

// SetPackageLengthMm sets the "package_length_mm" field.
func (_u *ProductUpdate) SetPackageLengthMm(v int) *ProductUpdate {
	_u.mutation.ResetPackageLengthMm()
	_u.mutation.SetPackageLengthMm(v)
	return _u
}

// SetNillablePackageLengthMm sets the "package_length_mm" field if the given value is not nil.
func (_u *ProductUpdate) SetNillablePackageLengthMm(v *int) *ProductUpdate {
	if v != nil {
		_u.SetPackageLengthMm(*v)
	}
	return _u
}

// AddPackageLengthMm adds value to the "package_length_mm" field.
func (_u *ProductUpdate) AddPackageLengthMm(v int) *ProductUpdate {
	_u.mutation.AddPackageLengthMm(v)
	return _u
}

// ClearPackageLengthMm clears the value of the "package_length_mm" field.
func (_u *ProductUpdate) ClearPackageLengthMm() *ProductUpdate {
	_u.mutation.ClearPackageLengthMm()
	return _u
}

// SetPackageWidthMm sets the "package_width_mm" field.
func (_u *ProductUpdate) SetPackageWidthMm(v int) *ProductUpdate {
	_u.mutation.ResetPackageWidthMm()
	_u.mutation.SetPackageWidthMm(v)
	return _u
}

// SetNillablePackageWidthMm sets the "package_width_mm" field if the given value is not nil.
func (_u *ProductUpdate) SetNillablePackageWidthMm(v *int) *ProductUpdate {
	if v != nil {
		_u.SetPackageWidthMm(*v)
	}
	return _u
}

// AddPackageWidthMm adds value to the "package_width_mm" field.
func (_u *ProductUpdate) AddPackageWidthMm(v int) *ProductUpdate {
	_u.mutation.AddPackageWidthMm(v)
	return _u
}

// ClearPackageWidthMm clears the value of the "package_width_mm" field.
func (_u *ProductUpdate) ClearPackageWidthMm() *ProductUpdate {
	_u.mutation.ClearPackageWidthMm()
	return _u
}

// SetPackageHeightMm sets the "package_height_mm" field.
func (_u *ProductUpdate) SetPackageHeightMm(v int) *ProductUpdate {
	_u.mutation.ResetPackageHeightMm()
	_u.mutation.SetPackageHeightMm(v)
	return _u
}

// SetNillablePackageHeightMm sets the "package_height_mm" field if the given value is not nil.
func (_u *ProductUpdate) SetNillablePackageHeightMm(v *int) *ProductUpdate {
	if v != nil {
		_u.SetPackageHeightMm(*v)
	}
	return _u
}

// AddPackageHeightMm adds value to the "package_height_mm" field.
func (_u *ProductUpdate) AddPackageHeightMm(v int) *ProductUpdate {
	_u.mutation.AddPackageHeightMm(v)
	return _u
}

// ClearPackageHeightMm clears the value of the "package_height_mm" field.
func (_u *ProductUpdate) ClearPackageHeightMm() *ProductUpdate {
	_u.mutation.ClearPackageHeightMm()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ProductUpdate) SetUserID(v uuid.UUID) *ProductUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ProductUpdate) SetNillableUserID(v *uuid.UUID) *ProductUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProductUpdate) SetUser(v *User) *ProductUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (_u *ProductUpdate) Mutation() *ProductMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProductUpdate) ClearUser() *ProductUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProductUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProductUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProductUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProductUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProductUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Product.user"`)
	}
	return nil
}

func (_u *ProductUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(product.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(product.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.ShortDescription(); ok {
		_spec.SetField(product.FieldShortDescription, field.TypeString, value)
	}
	if _u.mutation.ShortDescriptionCleared() {
		_spec.ClearField(product.FieldShortDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LongDescription(); ok {
		_spec.SetField(product.FieldLongDescription, field.TypeString, value)
	}
	if _u.mutation.LongDescriptionCleared() {
		_spec.ClearField(product.FieldLongDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeInt64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(product.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(product.FieldCurrency, field.TypeString)
	}
	if value, ok := _u.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt, value)
	}
	if _u.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt)
	}
	if value, ok := _u.mutation.WeightGrams(); ok {
		_spec.SetField(product.FieldWeightGrams, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWeightGrams(); ok {
		_spec.AddField(product.FieldWeightGrams, field.TypeInt, value)
	}
	if _u.mutation.WeightGramsCleared() {
		_spec.ClearField(product.FieldWeightGrams, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageLengthMm(); ok {
		_spec.SetField(product.FieldPackageLengthMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageLengthMm(); ok {
		_spec.AddField(product.FieldPackageLengthMm, field.TypeInt, value)
	}
	if _u.mutation.PackageLengthMmCleared() {
		_spec.ClearField(product.FieldPackageLengthMm, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageWidthMm(); ok {
		_spec.SetField(product.FieldPackageWidthMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageWidthMm(); ok {
		_spec.AddField(product.FieldPackageWidthMm, field.TypeInt, value)
	}
	if _u.mutation.PackageWidthMmCleared() {
		_spec.ClearField(product.FieldPackageWidthMm, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageHeightMm(); ok {
		_spec.SetField(product.FieldPackageHeightMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageHeightMm(); ok {
		_spec.AddField(product.FieldPackageHeightMm, field.TypeInt, value)
	}
	if _u.mutation.PackageHeightMmCleared() {
		_spec.ClearField(product.FieldPackageHeightMm, field.TypeInt)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.UserTable,
			Columns: []string{product.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.UserTable,
			Columns: []string{product.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProductUpdateOne) SetUpdateTime(v time.Time) *ProductUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ProductUpdateOne) SetTitle(v string) *ProductUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableTitle(v *string) *ProductUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ProductUpdateOne) ClearTitle() *ProductUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetShortDescription sets the "short_description" field.
func (_u *ProductUpdateOne) SetShortDescription(v string) *ProductUpdateOne {
	_u.mutation.SetShortDescription(v)
	return _u
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableShortDescription(v *string) *ProductUpdateOne {
	if v != nil {
		_u.SetShortDescription(*v)
	}
	return _u
}

// ClearShortDescription clears the value of the "short_description" field.
func (_u *ProductUpdateOne) ClearShortDescription() *ProductUpdateOne {
	_u.mutation.ClearShortDescription()
	return _u
}

// SetLongDescription sets the "long_description" field.
func (_u *ProductUpdateOne) SetLongDescription(v string) *ProductUpdateOne {
	_u.mutation.SetLongDescription(v)
	return _u
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableLongDescription(v *string) *ProductUpdateOne {
	if v != nil {
		_u.SetLongDescription(*v)
	}
	return _u
}

// ClearLongDescription clears the value of the "long_description" field.
func (_u *ProductUpdateOne) ClearLongDescription() *ProductUpdateOne {
	_u.mutation.ClearLongDescription()
	return _u
}

// SetPrice sets the "price" field.
func (_u *ProductUpdateOne) SetPrice(v int64) *ProductUpdateOne {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillablePrice(v *int64) *ProductUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *ProductUpdateOne) AddPrice(v int64) *ProductUpdateOne {
	_u.mutation.AddPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *ProductUpdateOne) ClearPrice() *ProductUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *ProductUpdateOne) SetCurrency(v string) *ProductUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableCurrency(v *string) *ProductUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *ProductUpdateOne) ClearCurrency() *ProductUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// SetStock sets the "stock" field.
func (_u *ProductUpdateOne) SetStock(v int) *ProductUpdateOne {
	_u.mutation.ResetStock()
	_u.mutation.SetStock(v)
	return _u
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableStock(v *int) *ProductUpdateOne {
	if v != nil {
		_u.SetStock(*v)
	}
	return _u
}

// AddStock adds value to the "stock" field.
func (_u *ProductUpdateOne) AddStock(v int) *ProductUpdateOne {
	_u.mutation.AddStock(v)
	return _u
}

// ClearStock clears the value of the "stock" field.
func (_u *ProductUpdateOne) ClearStock() *ProductUpdateOne {
	_u.mutation.ClearStock()
	return _u
}

// SetWeightGrams sets the "weight_grams" field.
func (_u *ProductUpdateOne) SetWeightGrams(v int) *ProductUpdateOne {
	_u.mutation.ResetWeightGrams()
	_u.mutation.SetWeightGrams(v)
	return _u
}

// SetNillableWeightGrams sets the "weight_grams" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableWeightGrams(v *int) *ProductUpdateOne {
	if v != nil {
		_u.SetWeightGrams(*v)
	}
	return _u
}

// AddWeightGrams adds value to the "weight_grams" field.
func (_u *ProductUpdateOne) AddWeightGrams(v int) *ProductUpdateOne {
	_u.mutation.AddWeightGrams(v)
	return _u
}

// ClearWeightGrams clears the value of the "weight_grams" field.
func (_u *ProductUpdateOne) ClearWeightGrams() *ProductUpdateOne {
	_u.mutation.ClearWeightGrams()
	return _u
}

// SetPackageLengthMm sets the "package_length_mm" field.
func (_u *ProductUpdateOne) SetPackageLengthMm(v int) *ProductUpdateOne {
	_u.mutation.ResetPackageLengthMm()
	_u.mutation.SetPackageLengthMm(v)
	return _u
}

// SetNillablePackageLengthMm sets the "package_length_mm" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillablePackageLengthMm(v *int) *ProductUpdateOne {
	if v != nil {
		_u.SetPackageLengthMm(*v)
	}
	return _u
}

// AddPackageLengthMm adds value to the "package_length_mm" field.
func (_u *ProductUpdateOne) AddPackageLengthMm(v int) *ProductUpdateOne {
	_u.mutation.AddPackageLengthMm(v)
	return _u
}

// ClearPackageLengthMm clears the value of the "package_length_mm" field.
func (_u *ProductUpdateOne) ClearPackageLengthMm() *ProductUpdateOne {
	_u.mutation.ClearPackageLengthMm()
	return _u
}

// SetPackageWidthMm sets the "package_width_mm" field.
func (_u *ProductUpdateOne) SetPackageWidthMm(v int) *ProductUpdateOne {
	_u.mutation.ResetPackageWidthMm()
	_u.mutation.SetPackageWidthMm(v)
	return _u
}

// SetNillablePackageWidthMm sets the "package_width_mm" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillablePackageWidthMm(v *int) *ProductUpdateOne {
	if v != nil {
		_u.SetPackageWidthMm(*v)
	}
	return _u
}

// AddPackageWidthMm adds value to the "package_width_mm" field.
func (_u *ProductUpdateOne) AddPackageWidthMm(v int) *ProductUpdateOne {
	_u.mutation.AddPackageWidthMm(v)
	return _u
}

// ClearPackageWidthMm clears the value of the "package_width_mm" field.
func (_u *ProductUpdateOne) ClearPackageWidthMm() *ProductUpdateOne {
	_u.mutation.ClearPackageWidthMm()
	return _u
}

// SetPackageHeightMm sets the "package_height_mm" field.
func (_u *ProductUpdateOne) SetPackageHeightMm(v int) *ProductUpdateOne {
	_u.mutation.ResetPackageHeightMm()
	_u.mutation.SetPackageHeightMm(v)
	return _u
}

// SetNillablePackageHeightMm sets the "package_height_mm" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillablePackageHeightMm(v *int) *ProductUpdateOne {
	if v != nil {
		_u.SetPackageHeightMm(*v)
	}
	return _u
}

// AddPackageHeightMm adds value to the "package_height_mm" field.
func (_u *ProductUpdateOne) AddPackageHeightMm(v int) *ProductUpdateOne {
	_u.mutation.AddPackageHeightMm(v)
	return _u
}

// ClearPackageHeightMm clears the value of the "package_height_mm" field.
func (_u *ProductUpdateOne) ClearPackageHeightMm() *ProductUpdateOne {
	_u.mutation.ClearPackageHeightMm()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ProductUpdateOne) SetUserID(v uuid.UUID) *ProductUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ProductUpdateOne) SetNillableUserID(v *uuid.UUID) *ProductUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProductUpdateOne) SetUser(v *User) *ProductUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (_u *ProductUpdateOne) Mutation() *ProductMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProductUpdateOne) ClearUser() *ProductUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ProductUpdate builder.
func (_u *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Product entity.
func (_u *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProductUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := product.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProductUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Product.user"`)
	}
	return nil
}

func (_u *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(product.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(product.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.ShortDescription(); ok {
		_spec.SetField(product.FieldShortDescription, field.TypeString, value)
	}
	if _u.mutation.ShortDescriptionCleared() {
		_spec.ClearField(product.FieldShortDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LongDescription(); ok {
		_spec.SetField(product.FieldLongDescription, field.TypeString, value)
	}
	if _u.mutation.LongDescriptionCleared() {
		_spec.ClearField(product.FieldLongDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(product.FieldPrice, field.TypeInt64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(product.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(product.FieldCurrency, field.TypeString)
	}
	if value, ok := _u.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt, value)
	}
	if _u.mutation.StockCleared() {
		_spec.ClearField(product.FieldStock, field.TypeInt)
	}
	if value, ok := _u.mutation.WeightGrams(); ok {
		_spec.SetField(product.FieldWeightGrams, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWeightGrams(); ok {
		_spec.AddField(product.FieldWeightGrams, field.TypeInt, value)
	}
	if _u.mutation.WeightGramsCleared() {
		_spec.ClearField(product.FieldWeightGrams, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageLengthMm(); ok {
		_spec.SetField(product.FieldPackageLengthMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageLengthMm(); ok {
		_spec.AddField(product.FieldPackageLengthMm, field.TypeInt, value)
	}
	if _u.mutation.PackageLengthMmCleared() {
		_spec.ClearField(product.FieldPackageLengthMm, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageWidthMm(); ok {
		_spec.SetField(product.FieldPackageWidthMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageWidthMm(); ok {
		_spec.AddField(product.FieldPackageWidthMm, field.TypeInt, value)
	}
	if _u.mutation.PackageWidthMmCleared() {
		_spec.ClearField(product.FieldPackageWidthMm, field.TypeInt)
	}
	if value, ok := _u.mutation.PackageHeightMm(); ok {
		_spec.SetField(product.FieldPackageHeightMm, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPackageHeightMm(); ok {
		_spec.AddField(product.FieldPackageHeightMm, field.TypeInt, value)
	}
	if _u.mutation.PackageHeightMmCleared() {
		_spec.ClearField(product.FieldPackageHeightMm, field.TypeInt)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.UserTable,
			Columns: []string{product.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.UserTable,
			Columns: []string{product.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
