// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/notification"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Creation time (UTC)
	CreatedAt time.Time `json:"created_at"`
	// Last update time (UTC)
	UpdatedAt time.Time `json:"updated_at"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Message holds the value of the "message" field.
	Message string `json:"message"`
	// Type holds the value of the "type" field.
	Type notification.Type `json:"type"`
	// Priority holds the value of the "priority" field.
	Priority notification.Priority `json:"priority"`
	// Channel holds the value of the "channel" field.
	Channel notification.Channel `json:"channel"`
	// Read holds the value of the "read" field.
	Read bool `json:"read"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived"`
	// Sticky holds the value of the "sticky" field.
	Sticky bool `json:"sticky"`
	// Link holds the value of the "link" field.
	Link *string `json:"link"`
	// Action holds the value of the "action" field.
	Action *string `json:"action"`
	// ResourceType holds the value of the "resource_type" field.
	ResourceType *string `json:"resource_type"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID *string `json:"resource_id"`
	// GroupKey holds the value of the "group_key" field.
	GroupKey *string `json:"group_key"`
	// DedupeKey holds the value of the "dedupe_key" field.
	DedupeKey *string `json:"dedupe_key"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt *time.Time `json:"delivered_at"`
	// ReadAt holds the value of the "read_at" field.
	ReadAt *time.Time `json:"read_at"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges        NotificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldMeta:
			values[i] = new([]byte)
		case notification.FieldRead, notification.FieldArchived, notification.FieldSticky:
			values[i] = new(sql.NullBool)
		case notification.FieldTitle, notification.FieldMessage, notification.FieldType, notification.FieldPriority, notification.FieldChannel, notification.FieldLink, notification.FieldAction, notification.FieldResourceType, notification.FieldResourceID, notification.FieldGroupKey, notification.FieldDedupeKey:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt, notification.FieldDeliveredAt, notification.FieldReadAt, notification.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case notification.FieldID, notification.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (_m *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case notification.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case notification.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case notification.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case notification.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = notification.Type(value.String)
			}
		case notification.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				_m.Priority = notification.Priority(value.String)
			}
		case notification.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				_m.Channel = notification.Channel(value.String)
			}
		case notification.FieldRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				_m.Read = value.Bool
			}
		case notification.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				_m.Archived = value.Bool
			}
		case notification.FieldSticky:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sticky", values[i])
			} else if value.Valid {
				_m.Sticky = value.Bool
			}
		case notification.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				_m.Link = new(string)
				*_m.Link = value.String
			}
		case notification.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = new(string)
				*_m.Action = value.String
			}
		case notification.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				_m.ResourceType = new(string)
				*_m.ResourceType = value.String
			}
		case notification.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = new(string)
				*_m.ResourceID = value.String
			}
		case notification.FieldGroupKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_key", values[i])
			} else if value.Valid {
				_m.GroupKey = new(string)
				*_m.GroupKey = value.String
			}
		case notification.FieldDedupeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dedupe_key", values[i])
			} else if value.Valid {
				_m.DedupeKey = new(string)
				*_m.DedupeKey = value.String
			}
		case notification.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				_m.DeliveredAt = new(time.Time)
				*_m.DeliveredAt = value.Time
			}
		case notification.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				_m.ReadAt = new(time.Time)
				*_m.ReadAt = value.Time
			}
		case notification.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = new(time.Time)
				*_m.ExpiresAt = value.Time
			}
		case notification.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (_m *Notification) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Notification entity.
func (_m *Notification) QueryUser() *UserQuery {
	return NewNotificationClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Notification) Unwrap() *Notification {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: Notification is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", _m.Priority))
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", _m.Channel))
	builder.WriteString(", ")
	builder.WriteString("read=")
	builder.WriteString(fmt.Sprintf("%v", _m.Read))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", _m.Archived))
	builder.WriteString(", ")
	builder.WriteString("sticky=")
	builder.WriteString(fmt.Sprintf("%v", _m.Sticky))
	builder.WriteString(", ")
	if v := _m.Link; v != nil {
		builder.WriteString("link=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Action; v != nil {
		builder.WriteString("action=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ResourceType; v != nil {
		builder.WriteString("resource_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ResourceID; v != nil {
		builder.WriteString("resource_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.GroupKey; v != nil {
		builder.WriteString("group_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DedupeKey; v != nil {
		builder.WriteString("dedupe_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DeliveredAt; v != nil {
		builder.WriteString("delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.ReadAt; v != nil {
		builder.WriteString("read_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", _m.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
