// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time"`
	// nama_produk / product title
	Title string `json:"title"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description"`
	// LongDescription holds the value of the "long_description" field.
	LongDescription string `json:"long_description"`
	// price in smallest currency unit (IDR -> 107000)
	Price int64 `json:"price"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock"`
	// weight in grams, convert if source uses different unit
	WeightGrams int `json:"weight_grams"`
	// PackageLengthMm holds the value of the "package_length_mm" field.
	PackageLengthMm int `json:"package_length_mm"`
	// PackageWidthMm holds the value of the "package_width_mm" field.
	PackageWidthMm int `json:"package_width_mm"`
	// PackageHeightMm holds the value of the "package_height_mm" field.
	PackageHeightMm int `json:"package_height_mm"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldPrice, product.FieldStock, product.FieldWeightGrams, product.FieldPackageLengthMm, product.FieldPackageWidthMm, product.FieldPackageHeightMm:
			values[i] = new(sql.NullInt64)
		case product.FieldTitle, product.FieldShortDescription, product.FieldLongDescription, product.FieldCurrency:
			values[i] = new(sql.NullString)
		case product.FieldCreateTime, product.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case product.FieldID, product.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (_m *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case product.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case product.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case product.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case product.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				_m.ShortDescription = value.String
			}
		case product.FieldLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field long_description", values[i])
			} else if value.Valid {
				_m.LongDescription = value.String
			}
		case product.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				_m.Price = value.Int64
			}
		case product.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case product.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				_m.Stock = int(value.Int64)
			}
		case product.FieldWeightGrams:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_grams", values[i])
			} else if value.Valid {
				_m.WeightGrams = int(value.Int64)
			}
		case product.FieldPackageLengthMm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_length_mm", values[i])
			} else if value.Valid {
				_m.PackageLengthMm = int(value.Int64)
			}
		case product.FieldPackageWidthMm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_width_mm", values[i])
			} else if value.Valid {
				_m.PackageWidthMm = int(value.Int64)
			}
		case product.FieldPackageHeightMm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field package_height_mm", values[i])
			} else if value.Valid {
				_m.PackageHeightMm = int(value.Int64)
			}
		case product.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (_m *Product) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Product entity.
func (_m *Product) QueryUser() *UserQuery {
	return NewProductClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Product) Update() *ProductUpdateOne {
	return NewProductClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Product) Unwrap() *Product {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: Product is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(_m.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("long_description=")
	builder.WriteString(_m.LongDescription)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", _m.Price))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("stock=")
	builder.WriteString(fmt.Sprintf("%v", _m.Stock))
	builder.WriteString(", ")
	builder.WriteString("weight_grams=")
	builder.WriteString(fmt.Sprintf("%v", _m.WeightGrams))
	builder.WriteString(", ")
	builder.WriteString("package_length_mm=")
	builder.WriteString(fmt.Sprintf("%v", _m.PackageLengthMm))
	builder.WriteString(", ")
	builder.WriteString("package_width_mm=")
	builder.WriteString(fmt.Sprintf("%v", _m.PackageWidthMm))
	builder.WriteString(", ")
	builder.WriteString("package_height_mm=")
	builder.WriteString(fmt.Sprintf("%v", _m.PackageHeightMm))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
