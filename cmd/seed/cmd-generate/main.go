package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/alfariiizi/vandor/cmd/utils"
)

func main() {
	seedDir := filepath.Join("internal", "seed")
	entries, err := os.ReadDir(seedDir)
	if err != nil {
		panic(fmt.Errorf("failed to read seed directory: %w", err))
	}

	var seeders []string
	for _, e := range entries {
		if strings.HasSuffix(e.Name(), "_seeder.go") {
			// remove "_seeder.go"
			base := strings.TrimSuffix(e.Name(), "_seeder.go")

			// convert snake_case â†’ PascalCase
			parts := strings.Split(base, "_")
			for i := range parts {
				parts[i] = strings.Title(parts[i])
			}
			structName := strings.Join(parts, "") + "Seeder"

			seeders = append(seeders, structName+"{}")
		}
	}

	if len(seeders) == 0 {
		panic("no seeders found in seed directory")
	}

	// build registry file
	content := fmt.Sprintf(
		`// DO NOT EDIT - AUTO-GENERATED BY vandor
package seed

import (
	"context"

	"%s/internal/core/model"
	"%s/internal/infrastructure/db"
)

var seeders = []model.Seeder{
`+"\t"+strings.Join(seeders, ",\n\t")+`,
}

func RunAll(ctx context.Context, client *db.Client, group string) error {
	for _, s := range seeders {
		if group == "" || s.Group() == group {
			if err := s.Run(ctx, client); err != nil {
				return err
			}
		}
	}
	return nil
}

func RunOne(ctx context.Context, client *db.Client, name string) error {
	for _, s := range seeders {
		if s.Name() == name {
			return s.Run(ctx, client)
		}
	}
	return nil
}
`,
		utils.GetModuleName(),
		utils.GetModuleName(),
	)

	seedPath := filepath.Join(seedDir, "seed.go")
	os.WriteFile(seedPath, []byte(content), 0644)
}
