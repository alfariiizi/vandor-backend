package {{.ServiceName}}_service

import (
	"context"

	domain_entries "{{.ModuleName}}/internal/core/domain"
	"{{.ModuleName}}/internal/core/model"
	"{{.ModuleName}}/internal/core/usecase"
	"{{.ModuleName}}/internal/infrastructure/db"
	"{{.ModuleName}}/internal/pkg/logger"
	"{{.ModuleName}}/internal/pkg/validator"
)

type {{.Name}}Input struct {
	// TODO: Define fields
}
type {{.Name}}Output struct {
	// TODO: Define fields
}
type {{.Name}} model.Service[{{.Name}}Input, {{.Name}}Output]

type {{.Receiver}} struct {
	domain  *domain_entries.Domain
	client  *db.Client
	usecase *usecase.Usecases
	validator validator.Validator
}

func New{{.Name}}(
	domain *domain_entries.Domain,
        client *db.Client,
	usecase *usecase.Usecases,
	validator validator.Validator,
) {{.Name}} {
	return &{{.Receiver}}{
		domain:  domain,
		client: client,
		usecase: usecase,
		validator: validator,
	}
}

func (s *{{.Receiver}}) Validate(input {{.Name}}Input) error {
	return s.validator.Validate(input)
}

func (s *{{.Receiver}}) Execute(ctx context.Context, input {{.Name}}Input) (*{{.Name}}Output, error) {
	if err := s.Validate(input); err != nil {
		return nil, err
	}

	res, err := s.Process(ctx, input)
	if err != nil {
		logger.Get().Error().
			Str("service", "{{.Name}}").
			Str("method", "Process").
			Err(err).
			Msg("failed to execute service")
		return nil, err
	}

	if err := s.Observer(ctx, input, res); err != nil {
		logger.Get().Error().
			Str("service", "{{.Name}}").
			Str("method", "Observer").
			Err(err).
			Msg("failed to execute observer")
	}

	return res, nil
}

func (s *{{.Receiver}}) Observer(ctx context.Context, input {{.Name}}Input, output *{{.Name}}Output) error {
        // TODO: Implement observer logic
	// This is optional. You can leave this blank if not needed.

	return nil
}

func (s *{{.Receiver}}) Process(ctx context.Context, input {{.Name}}Input) (*{{.Name}}Output, error) {
	// TODO: Implement logic

	return nil, nil
}
